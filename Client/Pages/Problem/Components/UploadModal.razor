@inherits FeedbackComponent<UploadModalArgument, Files?>
@using Client.Utils

<div class="upload-modal ant-upload ant-upload-selected-text ant-upload-drag ant-upload-select">
	<div class="ant-upload" style="position: relative" role="button" tabindex="0">
		<InputFile 
			multiple="@Options.Multiple" 
			accept="@Options.Accept" 
			style="position: absolute;width: 100%;height: 100%;opacity: 0;top: 0;left: 0;z-index:2;" 
			OnChange="@OnFileChange" />
		<div class="ant-upload-drag-container" style="display: flex; flex-direction: column">
			<p class="ant-upload-drag-icon">
				<Icon Type="inbox" />
			</p>
			<p class="ant-upload-text">拖入源文件或点击以上传</p>
		</div>
	</div>
	@if (BrowserFiles.Count > 0) {
		<AntList DataSource="@BrowserFiles">
			<ListItem Actions="@(new[] { GetDeleteAction(context) })">
				<ListItemMeta Title="@context.Name" />
				<div>@Formatter.FormatSize(context.Size)</div>
			</ListItem>
		</AntList>
	}
</div>


@code {

	[Inject]
	private MessageService MessageService { get; set; }

	private List<IBrowserFile> BrowserFiles { get; } = new List<IBrowserFile>();

	private Files Result { get; } = new();

	private long TotalSize { get; set; }

	public override async Task OnFeedbackCancelAsync(ModalClosingEventArgs args) {
		await (FeedbackRef as IOkCancelRef<Files?>)!.OnCancel(null);
		await base.OnFeedbackCancelAsync(args);
	}

	public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args) {
		await (FeedbackRef as IOkCancelRef<Files?>)!.OnOk(Result);
		await base.OnFeedbackOkAsync(args);
	}

	private RenderFragment GetDeleteAction(IBrowserFile file) => @<Icon Type="delete" OnClick="() => OnDelete(file)" />;

	private async Task OnFileChange(InputFileChangeEventArgs args) {
		var files = args.FileCount > 1 ? args.GetMultipleFiles(args.FileCount) : new[] { args.File };
		foreach (var file in files) {
			if (Result.ContainsKey(file.Name)) {
				var _ = MessageService.Error($"文件{file.Name}已上传");
				continue;
			}
			if (file.Size > Options.MaxFileSize) {
				var _ = MessageService.Error($"文件{file.Name}大小超出单个文件最大限制");
				continue;
			}
			if (TotalSize + file.Size > Options.TotalFileSize) {
				var _ = MessageService.Error("上传文件总大小超出限制");
				continue;
			}
			await using var stream = file.OpenReadStream(file.Size);
			var content = new byte[file.Size];
			await stream.ReadAsync(content);
			Result.Add(file.Name, content);
			BrowserFiles.Add(file);
			TotalSize += file.Size;
			StateHasChanged();
		}
	}

	private void OnDelete(IBrowserFile browserFile) {
		if (!Result.ContainsKey(browserFile.Name))
			return;
		var content = Result[browserFile.Name];
		TotalSize -= content.Length;
		BrowserFiles.Remove(browserFile);
		Result.Remove(browserFile.Name);
		StateHasChanged();
	}

}
