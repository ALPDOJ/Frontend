@namespace Client.Pages
@page "/admin/problem"
@using TrueMogician.Extensions.Enumerable
@using Microsoft.AspNetCore.Components

<div class="assignment-list">
	<Card Title="题目管理" Style="margin-top: 24px" BodyStyle="padding: 0 32px 40px 32px">
		<Extra>
			<div class="extra-content" style="display: flex">
				<Button Type="primary" OnClick="@(() => NavigationManager.NavigateTo("/admin/problem/edit"))">添加题目</Button>
				<SimpleSelect Mode="multiple"
				              Placeholder="请选择标签"
				              EnableSearch
				              AllowClear
				              Class="extra-content-select"
				              OnSelectedItemsChanged="OnSearchedTagsChanged">
					<SelectOptions>
						@if (Tags is not null)
						{
							@foreach (var group in Tags)
							{
								<SimpleSelectOption Label="@group" Value="@group"/>
							}
						}
					</SelectOptions>
				</SimpleSelect>
			</div>
		</Extra>
		<ChildContent>
			<Table TItem="BriefProblem" DataSource="DisplayedProblems">
				<AntDesign.Column TData="int" @bind-Field="context.Id" Title="题目ID" Align="@ColumnAlign.Center" Sortable Filterable/>
				<AntDesign.Column TData="string" @bind-Field="context.Title" Title="标题" Align="ColumnAlign.Center" Sortable Filterable/>
				<AntDesign.Column TData="IList<string>" Field="context.Tags" Title="标签" Align="ColumnAlign.Center">
					<div>
						@foreach (var tag in context.Tags ?? Enumerable.Empty<string>())
						{
							<Tag>@tag</Tag>
						}
					</div>
				</AntDesign.Column>
				<AntDesign.Column TData="bool" @bind-Field="context.Manual" Title="手动批改" Align="ColumnAlign.Center" Filterable/>
				<AntDesign.ActionColumn Align="ColumnAlign.Center">
					<Button Type="primary" OnClick="@(() => NavigationManager.NavigateTo($"/admin/problem/edit/{context.Id}"))">修改题目</Button>
				</AntDesign.ActionColumn>

			</Table>
		</ChildContent>
	</Card>
</div>

<style lang="css" scoped>
	.extra-content-select {
		margin-left: 16px;
		width: 272px;
		min-width: 200px;
	}

	@@media screen and (max-width: 576px) {
		.extra-content-select {
			margin-left: 0;
			width: 100%;
		}
	}
</style>

@code {


	[Inject]
	protected ApiClient Api { get; init; }

	[Inject]
	protected ErrorHandler ErrorHandler { get; init; }

	[Inject]
	protected MessageService MessageService { get; init; }

	[Inject]
	protected NavigationManager NavigationManager { get; init; }

	private ICollection<BriefProblem>? Problems { get; set; }

	private ICollection<BriefProblem> DisplayedProblems { get; set; }

	private List<string>? Tags { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			DisplayedProblems = Problems = (await Api.GetBriefProblemsAsync()).Result.AsList();
			Tags = Problems.SelectMany(s => s.Tags ?? Enumerable.Empty<string>()).Distinct().ToList();
		}
		catch (ApiException exception)
		{
			if (!ErrorHandler.Handle(exception))
				throw;
		}
	}

	private void OnSearchedTagsChanged(IEnumerable<string>? groups)
	{
		DisplayedProblems = Problems!;
		var g = groups?.ToArray();
		if (g is { Length: > 0 })
			DisplayedProblems = DisplayedProblems!.Where(p => g.All(tag => p.Tags?.Contains(tag) == true)).ToArray();
		StateHasChanged();
	}

}