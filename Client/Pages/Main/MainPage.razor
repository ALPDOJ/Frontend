@namespace Client.Pages.Main
@page "/"
@page "/index"

<GridContent>
	<Row Gutter="@((ResponsiveGutter, ResponsiveGutter))">
		<Col Lg="24" Md="24" Sm="24" Xl="18" Xs="24" Style="margin-bottom: 24px">
			<div>
				<Carousel Autoplay="TimeSpan.FromSeconds(5)" Class="carousel">
					@if (CarouselUrls is null) {
						<CarouselSlick>
							<Empty />
						</CarouselSlick>
					}
					else {
						@foreach (var url in CarouselUrls) {
							<CarouselSlick>
								<Image Src="@url" Preview="false" />
							</CarouselSlick>
						}
					}
				</Carousel>
			</div>
		</Col>
		<Col Lg="24" Md="24" Sm="24" Xl="6" Xs="24" Flex="@(1)">
			<Row Gutter="@((ResponsiveGutter, ResponsiveGutter))">
				<Col Flex="@(1)">
					<Card Title="@("高级语言程序设计（荣）")" Class="extra-card" >
						夯实基础，掌握基础语法与逻辑<br/>
						促进应用，解决实际应用问题<br/>
						对接专业，面向信息大类专业背景
					</Card>
				</Col>
				<Col Flex="@(1)">
					<Card Title="@("Advanced Language Programming Design")" Class="extra-card" >
						Laying a solid foundation on programming grammar and logic<br/>
						Solving practical application problems through programming<br/>
						Coupling different majors with information related backgrounds
					</Card>
				</Col>
			</Row>
		</Col>
	</Row>
</GridContent>

<style lang="css" scoped>
	.ant-carousel .slick-slide {
		text-align: center;
		line-height: 160px;
		overflow: hidden;
	}

	.extra-card {
		min-width: 20em;
	}
</style>

@code {

	private static Dictionary<string, int> ResponsiveGutter { get; } = new() {
		["xs"] = 8,
		["sm"] = 16,
		["md"] = 24,
		["lg"] = 32,
		["xl"] = 48,
		["xxl"] = 64
	};

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private ErrorHandler ErrorHandler { get; init; }

	[Inject]
	private LocalStorageManager LocalStorageManager { get; init; }

	private IList<string>? CarouselUrls { get; set; }

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		try {
			await LocalStorageManager.Refresh();
			CarouselUrls = (await Api.GetCarouselImageUrlsAsync()).Result;
		}
		catch (ApiException ex) {
			await LocalStorageManager.ClearAsync();
			if (!ErrorHandler.Handle(ex))
				throw;
		}
	}

}