@namespace Client.Components
@using BasicLayout = Client.Layout.BasicLayout
@inherits AntDomComponentBase

<Space Class="@ClassMapper.Class" Size="@("24")">
	<SpaceItem>
		<HeaderSearch Class="action search"
			DefaultValue="umi ui"
			Options="DefaultOptions"
			Placeholder="全站搜索" />
	</SpaceItem>
	@if (User.Role != Role.Student) {
		<SpaceItem>
			<Switch CheckedChildren="管理视图" UnCheckedChildren="学生视图" OnChange="OnLayoutChange" />
		</SpaceItem>
	}
	<SpaceItem>
		<AntDesign.Tooltip Placement="@Placement.Bottom" Title="@("Help")">
			<Unbound>
				<span class="action" @ref="@context.Current">
					<Icon Theme="outline" Type="question-circle" />
				</span>
			</Unbound>
		</AntDesign.Tooltip>
	</SpaceItem>
	<SpaceItem>
		<NoticeIcon ClearText="Empty"
			Count="_count"
			OnClear="HandleClear"
			OnViewMore="HandleViewMore"
			ViewMoreText="see more">
			<NoticeList Data="_notifications"
				EmptyText="You have viewed all notifications"
				ShowViewMore
				TabKey="notification"
				Title="Notifications" />
			<NoticeList Data="_messages"
				EmptyText="You have read all messages"
				ShowViewMore
				TabKey="message"
				Title="Messages" />
			<NoticeList Data="_events"
				EmptyText="You have completed all to do"
				ShowViewMore
				TabKey="event"
				Title="Upcoming" />
		</NoticeIcon>
	</SpaceItem>
	<SpaceItem>
		<AvatarDropdown Avatar="@Avatar"
			MenuItems="@AvatarMenuItems"
			Name="@User.Username"
			OnItemSelected="HandleSelectUser">
		</AvatarDropdown>
	</SpaceItem>
</Space>

@code {

	private int _count = 0;

	private NoticeIconData[] _events = Array.Empty<NoticeIconData>();

	private NoticeIconData[] _messages = Array.Empty<NoticeIconData>();

	private NoticeIconData[] _notifications = Array.Empty<NoticeIconData>();

	[Parameter]
	public User User { get; set; }

	[Parameter]
	public string? Avatar { get; set; }

	[CascadingParameter]
	public BasicLayout Layout { get; set; }

	private List<AutoCompleteDataItem<string>> DefaultOptions { get; set; } = new() {
		new AutoCompleteDataItem<string> {
			Label = "umi ui",
			Value = "umi ui"
		},
		new AutoCompleteDataItem<string> {
			Label = "Pro Table",
			Value = "Pro Table"
		},
		new AutoCompleteDataItem<string> {
			Label = "Pro Layout",
			Value = "Pro Layout"
		}
	};

	public AvatarMenuItem[] AvatarMenuItems { get; set; } = {
		new() { Key = "center", IconType = "user", Option = "个人中心" },
		new() { Key = "setting", IconType = "setting", Option = "个人设置" },
		new() { IsDivider = true },
		new() { Key = "logout", IconType = "logout", Option = "退出登录" }
	};

	[Inject]
	protected NavigationManager Navigator { get; set; }

	[Inject]
	protected MessageService MessageService { get; set; }

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		SetClassMap();
	}

	protected void SetClassMap() {
		ClassMapper
			.Clear()
			.Add("right");
	}

	public void HandleSelectUser(MenuItem item) {
		switch (item.Key) {
			case "center":
				Navigator.NavigateTo("/account/center");
				break;
			case "setting":
				Navigator.NavigateTo("/account/settings");
				break;
			case "logout":
				Navigator.NavigateTo("/user/login");
				break;
		}
	}

	public async Task HandleClear(string key) {
		switch (key) {
			case "notification":
				_notifications = Array.Empty<NoticeIconData>();
				break;
			case "message":
				_messages = Array.Empty<NoticeIconData>();
				break;
			case "event":
				_events = Array.Empty<NoticeIconData>();
				break;
		}
		await MessageService.Success($"清空了{key}");
	}

	public async Task HandleViewMore(string key) {
		await MessageService.Info("Click on view more");
	}

	private void OnLayoutChange(bool @checked) {
		if (@checked) {
			Layout.View = User.Role;
			Navigator.NavigateTo("/admin");
		}
		else {
			Layout.View = Role.Student;
			Navigator.NavigateTo("/");
		}
		Layout.Refresh();
	}

}
