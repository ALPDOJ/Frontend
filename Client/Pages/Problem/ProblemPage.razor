@namespace Client.Pages.Problem
@page "/problem/{Id:int}"
@using Client.Utils
@using Newtonsoft.Json

<PageContainer TabList="@_tabList" Title="@(Problem?.Title ?? "加载中...")" Class="page-header" OnTabChange="OnTabChange">
	<Extra>
		<ButtonGroup>
			<Button Loading="@Submitting" Type="@ButtonType.Primary" OnClick="() => OnSubmitButtonClick(true)">测试</Button>
			<Button Loading="@Submitting" Type="@ButtonType.Primary" OnClick="() => OnSubmitButtonClick(false)">提交</Button>
		</ButtonGroup>
	</Extra>
	<ExtraContent>
		@if (Summary is not null) {
			<div class="more-info">
				<Statistic Title="@("剩余次数")" Value="@(Summary.Times - Summary.SubmittedTimes)" />
				<Statistic Title="@("当前分数")" Value="@($"{Summary.Score ?? 0} / {Summary.TotalScore}")" />
			</div>
		}
	</ExtraContent>
	<Content>
		<Descriptions Class="header-list" Column="2" Size="small">
			<DescriptionsItem Title="@("题目序号")">@Id</DescriptionsItem>
			<DescriptionsItem Title="@("题目标签")">
				@if (Problem is null) {
					<Spin />
				}
				else {
					@foreach (var tag in Problem.Tags) {
						<Tag>@tag</Tag>
					}
				}
			</DescriptionsItem>
			<DescriptionsItem Title="@("批阅模式")"><TextOrSpin Value="@Problem?.Manual" Formatter="@(v => v == true ? "人工批阅" : "自动评测")" /></DescriptionsItem>
			<DescriptionsItem Title="@("截止日期")"><TextOrSpin Value="@Summary?.Deadline.ToString("yyyy-MM-dd hh:mm:ss")" /></DescriptionsItem>
			<DescriptionsItem Title="@("运行时间限制")"><TextOrSpin Value="@Problem?.Limit.Time" Formatter="@(v => $"{v} ms")" /></DescriptionsItem>
			<DescriptionsItem Title="@("运行内存限制")"><TextOrSpin Value="@Problem?.Limit.Memory" Formatter="@(v => Formatter.FormatSize(v!.Value))" /></DescriptionsItem>
		</Descriptions>
	</Content>
	<ChildContent>
		<div class="main__b__3">
			@switch (TabKey) {
				case "content":
					<ContentView Problem="@Problem" Examples="@Examples" />
					break;
				case "submission":
					<SubmissionView />
					break;
				case "discussion":
					<DiscussionView ProblemId="@Id" />
					break;
			}
		</div>
	</ChildContent>
</PageContainer>

@code {

	private readonly IList<TabPaneItem> _tabList = new List<TabPaneItem> {
		new() { Key = "content", Tab = "题目内容" },
		new() { Key = "discussion", Tab = "提问讨论" },
		new() { Key = "submission", Tab = "评测记录" },
		new() { Key = "statistics", Tab = "题目统计" }
	};

	[Parameter]
	public int Id { get; set; }

	private Problem? Problem { get; set; }

	private IList<TestCase>? Examples { get; set; }

	private UserProblemSummary? Summary { get; set; }

	[Inject]
	private NavigationManager Navigator { get; init; }

	[Inject]
	private ModalService ModalService { get; init; }

	[Inject]
	private MessageService MessageService { get; init; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private ErrorHandler ErrorHandler { get; init; }

	private string TabKey { get; set; } = "content";

	private bool Submitting { get; set; }

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		try {
			Problem = (await Api.GetProblemAsync(Id)).Result;
			Examples = (await Api.GetExampleTestCasesAsync(Id)).Result;
			Summary = (await Api.GetProblemSummaryAsync(Id)).Result;
		}
		catch (ApiException ex) {
			if (!ErrorHandler.Handle(ex, 500))
				throw;
		}
	}

	private async Task<Files?> ShowUploadModal(ModalOptions options,UploadModalArgument argument) {
		var modal = await ModalService.CreateModalAsync<UploadModal, UploadModalArgument, Files?>(options, argument);
		TaskCompletionSource<Files?> taskSource = new();
		modal.OnOk = modal.OnCancel = result => {
			taskSource.SetResult(result);
			return Task.CompletedTask;
		};
		return await taskSource.Task;
	} 

	private void OnTabChange(string key) => TabKey = key;

	private async Task OnSubmitButtonClick(bool test) {
		var options = new ModalOptions {
			Title = Problem!.Manual ? "上传作业文件" : "上传源文件",
			OkText = "提交",
			CancelText = "取消",
			Draggable = true
		};
		var argument = new UploadModalArgument {
			Accept = Problem.Manual ? "" : ".cpp",
			Multiple = Problem.Manual
		};
		var files = await ShowUploadModal(options, argument);
		if (files is null)
			return;
		Submitting = true;
		StateHasChanged();
		try {
			var resp = await Api.SubmitAsync(new NewSubmission {
				Test = test,
				ProblemId = Id,
				Files = files
			});
			var _ = MessageService.Success($"提交成功，ID为{resp.Result.Id}");
			Navigator.NavigateTo($"/submission/{resp.Result.Id}/result");
		}
		catch (ApiException ex) {
			Console.WriteLine(JsonConvert.SerializeObject(ex, Formatting.Indented));
			var _ = MessageService.Error($"提交失败：{ex.Message}");
		}
		finally {
			Submitting = false;
			StateHasChanged();
		}
	}

}