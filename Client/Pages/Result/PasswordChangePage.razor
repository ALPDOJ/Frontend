@namespace Client.Pages
@page "/result/password-change"
@using Client.Utils
@layout LoginLayout

@if (Success.HasValue) {
	<Result Status="@(Success.Value ? "success" : "error")" Title="@Title" SubTitle="@SubTitle" Extra="@Extra" />
}

@code {

	[SupplyParameterFromQuery(Name = "user-id")]
	[Parameter]
	public int Id { get; init; }

	[SupplyParameterFromQuery(Name = "value")]
	[Parameter]
	public string EscapedPasswordCipher { get; init; }

	[SupplyParameterFromQuery(Name = "token")]
	[Parameter]
	public string EscapedToken { get; init; }

	[SupplyParameterFromQuery(Name = "reset")]
	[Parameter]
	public bool IsReset { get; init; }

	public string PasswordCipher => Uri.UnescapeDataString(EscapedPasswordCipher);

	public string Token => Uri.UnescapeDataString(EscapedToken);

	[Inject]
	private NavigationManager Navigator { get; init; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private LocalStorageManager LocalStorageManager { get; init; }

	private bool? Success { get; set; }

	private string? ErrorMessage { get; set; }

	private RenderFragment ReturnToLoginButton => @<Button OnClick="@(() => Navigator.NavigateTo("/login"))">返回登录页面</Button>;

	private RenderFragment LoginButton {
		get {
			var query = new Dictionary<string, string> {
				["id"] = Id.ToString(),
				["password"] = Id.ToString(),
				["target"] = "/account"
			};
			var uri = $"/login?{query.ToQueryString()}";
			return @<Button OnClick="@(() => Navigator.NavigateTo(uri))">设置新密码</Button>;
		}
	}

	private RenderFragment Extra => Success!.Value && IsReset ? LoginButton : ReturnToLoginButton;

	private string Title => $"密码{(IsReset ? "重置" : "设置")}{(Success!.Value ? "成功" :"失败")}";

	private string? SubTitle => Success!.Value ? IsReset ? "初始密码为学号，请尽快前往用户中心设置新密码" : null : $"错误信息：{ErrorMessage}";

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		try {
			await Api.SetUserPasswordAsync(Id, Token, new PasswordPayload {Password = PasswordCipher });
			Success = true;
			LocalStorageManager.Password = null;
		}
		catch (ApiException ex) {
			Success = false;
			ErrorMessage = ex.Response;
		}
	}
}