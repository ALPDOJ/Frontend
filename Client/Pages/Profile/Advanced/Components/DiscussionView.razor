@namespace Client.Pages.Profile.Advanced
@using Comment = Client.Api.Comment
@using TrueMogician.Extensions.Collections.Tree
@using Blazored.LocalStorage

<Card Bordered>
	<CascadingValue Value="@CurrentUser" Name="@("CurrentUser")" IsFixed>
		@foreach (var tree in CommentForest) {
			<CommentTree Data="tree.Root" OnReply="@OnReply" />
		}
	</CascadingValue>
	
	<Comment>
		<AvatarTemplate>
			@if (string.IsNullOrEmpty(CurrentUserAvatar)) {
				<Avatar>@CurrentUser.Username[0]</Avatar>
			}
			else {
				<Avatar Src="@CurrentUserAvatar" />
			}
		</AvatarTemplate>
		<ContentTemplate>
			<TextArea @bind-Value="@CommentContent" @ref="TextAreaElement" ShowCount MaxLength="256"></TextArea>
			<div style="margin-top: 24px; display: flex; justify-content: right">
				<Button Type="@ButtonType.Primary" OnClick="SubmitComment">@(RepliedCommentId.HasValue ? "回复" : "发布")</Button>
				<Button Type="@ButtonType.Primary" Disabled="@(!RepliedCommentId.HasValue)" OnClick="() => RepliedCommentId = null">
					取消回复
				</Button>
			</div>
		</ContentTemplate>
	</Comment>
</Card>

@code {

	private IList<Comment> _comments;

	public IList<Comment> Comments {
		get => _comments;
		set {
			_comments = value;
			var dictionary = value.ToDictionary(c => c.Id);
			CommentForest = TreeUtilities.BuildForest(value, c => dictionary.ContainsKey(c.Id) ? dictionary[c.Id] : null);
		}
	}

	[Parameter]
	public int ProblemId { get; set; }

	[Inject]
	public ApiClient Api { get; set; }

	[Inject]
	public ISyncLocalStorageService LocalStorage { get; set; }

	private Forest<ValuedTreeNode<Comment>> CommentForest { get; set; }

	private User CurrentUser { get; set; }

	private string? CurrentUserAvatar { get; set; }

	private int? RepliedCommentId { get; set; }

	private string CommentContent { get; set; }

	private TextArea TextAreaElement { get; set; }

	protected async override Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		Comments = (await Api.GetProblemCommentsAsync(ProblemId)).Result;
		CurrentUser = LocalStorage.GetItem<User>("currentUser");
		CurrentUserAvatar = LocalStorage.GetItem<string?>("currentUserAvatar");
	}

	private async Task OnReply(int id) {
		RepliedCommentId = id;
		await TextAreaElement.Focus();
	}

	private async Task SubmitComment() {
		var resp = await Api.CommentProblemAsync(ProblemId, new NewComment {ReplyTo = RepliedCommentId, Content=CommentContent});
		var newComment = new Comment {
			Id = resp.Result.Id,
			ProblemId = ProblemId,
			Time = resp.Result.Time,
			Content = CommentContent,
			ReplyTo = RepliedCommentId,
			Author = new Author {
				Id = CurrentUser.Id,
				Username = CurrentUser.Username,
				HasAvatar = CurrentUserAvatar is not null
			}
		};
		Comments.Add(newComment);
		if (RepliedCommentId.HasValue) {
			foreach (var tree in CommentForest) {
				var target = tree.Root.FirstOrDefault(n => n.Value.Id == RepliedCommentId.Value);
				if (target is not null) {
					target.Children.Add(new ValuedTreeNode<Comment>(newComment));
					break;
				}
			}
		}
		else 
			CommentForest.Add(new ValuedTreeNode<Comment>(newComment));
		StateHasChanged();
	}

}