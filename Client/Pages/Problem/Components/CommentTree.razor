@namespace Client.Pages.Problem
@using TrueMogician.Extensions.Collections.Tree
@using Blazored.LocalStorage
@using Client.Utils
@using OneOf.Types
@using Comment = Client.Api.Comment

<Comment @ref="@CommentElement" Author="@Value.Value.Author.Username" Datetime="@Formatter.FormatDateTimeRelatively(Value.Value.Time,2)" Actions="new []{LikeAction, DislikeAction, ReplyAction}">
	<AvatarTemplate>
		@RenderAvatar(Value.Value.Author)
	</AvatarTemplate>
	<ContentTemplate>
		@if (Value.Value.Content is null) {
			<span><i>该内容已被删除</i></span>
		}
		else {
			<RichTextDisplayer Value="@Value.Value.Content" />
		}
	</ContentTemplate>
	<ChildContent>
		@if (!Value.IsLeaf) {
			@foreach (var child in Value.Children) {
				<CommentTree Value="@child" OnReply="@OnReply" />
			}
		}
	</ChildContent>
</Comment>

@code {

	[Parameter]
    public ValuedTreeNode<Comment> Value { get; set; }

	[Parameter]
	public EventCallback<int> OnReply { get; set; }

	[CascadingParameter]
	public User CurrentUser { get; set; }

	[Inject]
	public ApiClient Api { get; set; }

	[Inject]
	public MessageService MessageService { get; set; }

	private AntDesign.Comment CommentElement { get; set; }

	private CommentReaction CurrentReaction { get; set; }

	private RenderFragment LikeAction =>
		@<span>
			<AntDesign.Tooltip Title="@("点赞")">
				<Icon Type="like" Theme="@(CurrentReaction == CommentReaction.Like ? "fill" : "outline")" OnClick="() => ReactToComment(CommentReaction.Like)" />
			</AntDesign.Tooltip>
			<span>@(Value.Value.Likers?.Count ?? 0)</span>
		</span>;

	private RenderFragment DislikeAction =>
		@<span>
			<AntDesign.Tooltip Title="@("点踩")">
				<Icon Type="dislike" Theme="@(CurrentReaction == CommentReaction.Dislike ? "fill" : "outline")" OnClick="() => ReactToComment(CommentReaction.Dislike)" />
			</AntDesign.Tooltip>
			<span>@(Value.Value.Dislikers?.Count ?? 0)</span>
		</span>;

	private RenderFragment ReplyAction =>
		@<span onclick="@(() => OnReply.InvokeAsync(Value.Value.Id))">回复</span>;

	private RenderFragment DeleteAction =>
		@<span>
			<AntDesign.Tooltip Title="@("删除")">
				<Icon Type="delete" OnClick="DeleteComment" />
			</AntDesign.Tooltip>
		</span>;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		CurrentReaction = Value.Value.Likers?.Contains(CurrentUser.Id) == true
			? CommentReaction.Like : Value.Value.Dislikers?.Contains(CurrentUser.Id) == true 
				? CommentReaction.Dislike 
				: CommentReaction.None;
	}

	private RenderFragment RenderAvatar(Author author) {
		if (author.HasAvatar)
			return @<Avatar Src="@($"{Api.BaseUrl}/user/{author.Id}/avatar")" />;
        return @<Avatar>author.Username[0]</Avatar>;
	}

	private async Task ReactToComment(CommentReaction button) {
		var reaction = button == CurrentReaction ? CommentReaction.None : button;
		try {
			await Api.ReactToCommentAsync(Value.Value.ProblemId, Value.Value.Id, reaction);
			if (CurrentReaction == CommentReaction.Like)
				Value.Value.Likers?.Remove(CurrentUser.Id);
			else if (CurrentReaction == CommentReaction.Dislike)
				Value.Value.Dislikers?.Remove(CurrentUser.Id);
			CurrentReaction = reaction;
			if (reaction == CommentReaction.Like)
				Value.Value.Likers?.Add(CurrentUser.Id);
			else if (reaction == CommentReaction.Dislike)
				Value.Value.Dislikers?.Add(CurrentUser.Id);
		}
		catch (ApiException ex) {
			var _ = MessageService.Error($"{ex.StatusCode}: {ex.Message}");
		}
	}

	private async Task DeleteComment() {
		try {
			await Api.DeleteCommentAsync(Value.Value.ProblemId, Value.Value.Id);
			Value.Value.Content = null;
			var _ = MessageService.Success("删除成功");
		}
		catch (ApiException ex) {
			var _ = MessageService.Error($"删除失败: {ex.Message}");
		}
	}
}
