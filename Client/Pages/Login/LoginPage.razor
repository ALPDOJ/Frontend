@namespace Client.Pages
@page "/login"
@layout LoginLayout

<div class="login-page">
	<Form Model="@Parameters" OnFinish="@OnSubmit">
		<FormItem Required>
			<AntDesign.Input @bind-Value="@context.Id" @ref="@IdInputBox" Placeholder="学号" Size="@InputSize.Large" Class="input">
				<Prefix>
					<Icon Type="user" />
				</Prefix>
			</AntDesign.Input>
		</FormItem>
		<FormItem Required>
			<InputPassword @bind-Value="@context.Password" Placeholder="密码" Size="@InputSize.Large" Class="input">
				<Prefix>
					<Icon Type="lock" />
				</Prefix>
			</InputPassword>
		</FormItem>
		<div>
			<Checkbox @bind-Value="@AutoLogin">
				记住账密
			</Checkbox>
			<Tooltip Title="@("发送验证邮件给绑定邮箱")" Style="float: right">
				<a onclick="@OnForgetPassword">
					忘记密码
				</a>
			</Tooltip>
		</div>
		<Button
			Block
			Loading="@LoggingIn"
			HtmlType="submit"
			Size="@ButtonSize.Large"
			Type="@ButtonType.Primary"
			Class="submit">
			登录
		</Button>
	</Form>
</div>

<style lang="css" scoped>
	.login-page {
		margin: 0 auto;
		width: 368px;
	}

	.login-page .icon { color: #1890ff; }

	.login-page .other {
		line-height: 22px;
		margin-top: 24px;
		text-align: left;
	}

	.login-page .other .icon {
		color: rgba(0, 0, 0, 0.45);
		cursor: pointer;
		font-size: 24px;
		margin-left: 16px;
		transition: color 0.3s;
		vertical-align: middle;
	}

	.login-page .other .icon:hover { color: #1890ff; }

	.login-page .other .register { float: right; }

	.login-page .prefixIcon {
		color: rgba(0, 0, 0, 0.25);
		font-size: 14px;
	}

	.login-page .submit {
		margin-top: 32px;
		width: 100%;
	}

	.login-page .input {
		border-radius: 5px;
	}
</style>

@code {

	[SupplyParameterFromQuery(Name = "id")]
	[Parameter]
	public int? UserId { get; init; }

	[SupplyParameterFromQuery]
	[Parameter]
	public string? Password { get; init; }

	[SupplyParameterFromQuery]
	[Parameter]
	public string? Target { get; init; }

	[Inject]
	private NavigationManager Navigator { get; init; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private MessageService MessageService { get; init; }

	[Inject]
	private LocalStorageManager LocalStorageManager { get; init; }

	[Inject]
	private ErrorHandler ErrorHandler { get; init; }

	private Input<int?> IdInputBox { get; set; }

	private LoginParameters Parameters { get; } = new();

	private bool AutoLogin { get; set; }

	private bool LoggingIn { get; set; }

	protected async override Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		if (UserId.HasValue || Password is not null) {
			if (UserId.HasValue)
				Parameters.Id = UserId;
			if (Password is not null)
				Parameters.Password = Password;
			if (UserId.HasValue && Password is not null) 
				await OnSubmit(true);
		}
		if (LocalStorageManager.Id is {} id)
			Parameters.Id ??= id;
		if (LocalStorageManager.Password is {} password)
			Parameters.Password ??= password;
		AutoLogin = !UserId.HasValue && Password is null && Parameters.Id.HasValue && Parameters.Password is not null;
		StateHasChanged();
	}

	private Task OnSubmit() => OnSubmit(false);

	private async Task OnSubmit(bool fromQuery) {
		if (Parameters.Id is null) {
			var _ = MessageService.Error("学号不可为空");
			return;
		}
		if (Parameters.Password is null) {
			var _ = MessageService.Error("密码不可为空");
			return;
		}
		var id = Parameters.Id.Value;
		LoggingIn = true;
		try {
			await Api.LoginAsync(id, Parameters.Password);
			if (!fromQuery) {
				if (AutoLogin) {
					LocalStorageManager.Id = id;
					LocalStorageManager.Password = Parameters.Password;
				}
				else
					await LocalStorageManager.RemoveAsync("id", "password");
			}
			Navigator.NavigateTo(Target ?? "/");
		}
		catch (ApiException ex) {
			if (ex.StatusCode == 401) {
				var _ = MessageService.Error("用户名或密码错误，请重新输入");
				Parameters.Password = null;
			}
			else
				ErrorHandler.Handle(ex);
		}
		finally {
			LoggingIn = false;
			StateHasChanged();
		}
	}

	private async Task OnForgetPassword() {
		if (Parameters.Id is null) {
			var _ = MessageService.Warn("请先填写学号", 5);
			await IdInputBox.Focus();
			return;
		}
		var config = new MessageConfig {
			Key = Guid.NewGuid().ToString("N")
		};
		try {
			config.Content = "邮件发送中...";
			config.Duration = -1;
			var _ = MessageService.Loading(config);
			await Api.SendPasswordResetEmailAsync(Parameters.Id.Value, null);
			config.Content = "重置密码邮件已发送到绑定的邮箱，有效时间10分钟，请前往邮箱查看";
			config.Duration = 5;
			var __ = MessageService.Success(config);
		}
		catch (ApiException ex) {
			config.Content = $"发送失败：{ex.Response}";
			config.Duration = 5;
			var _ = MessageService.Error(config);
		}
	}
}
