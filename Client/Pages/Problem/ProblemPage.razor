@namespace Client.Pages.Problem
@page "/problem/{Id:int}"
@using Client.Utils
@using Newtonsoft.Json

@if (Problem is null) {
	<Skeleton Active />
}
else {
	<PageContainer TabList="_tabList" Title="@Problem.Title" Class="pageHeader" OnTabChange="OnTabChange">
		<Extra>
			<ButtonGroup>
				<Button Type="@ButtonType.Primary" OnClick="() => OnSubmitButtonClick(true)">测试</Button>
				<Button Type="@ButtonType.Primary" OnClick="() => OnSubmitButtonClick(false)">提交</Button>
			</ButtonGroup>
		</Extra>
		<ExtraContent>
			@if (Summary is not null) {
				<div class="moreInfo">
					<Statistic Title="@("剩余次数")" Value="@(Summary.Times - Summary.SubmittedTimes)" />
					<Statistic Title="@("当前分数")" Value="@($"{Summary.Score ?? 0} / {Summary.TotalScore}")" />
				</div>
			}
		</ExtraContent>
		<Content>
			<Descriptions Class="headerList" Column="2" Size="small">
				<DescriptionsItem Title="@("题目序号")">@Id</DescriptionsItem>
				<DescriptionsItem Title="@("题目标签")">
					@foreach (var tag in Problem.Tags) {
						<Tag>@tag</Tag>
					}
				</DescriptionsItem>
				<DescriptionsItem Title="@("批阅模式")">@(Problem.Manual ? "人工批阅" : "自动评测")</DescriptionsItem>
				<DescriptionsItem Title="@("截止日期")">@Summary.Deadline.ToString("yyyy-MM-dd hh:mm:ss")</DescriptionsItem>
				<DescriptionsItem Title="@("运行时间限制")">@($"{Problem.Limit.Time} ms")</DescriptionsItem>
				<DescriptionsItem Title="@("运行内存限制")">@Formatter.FormatSize(Problem.Limit.Memory)</DescriptionsItem>
			</Descriptions>
		</Content>
		<ChildContent>
			<div class="main__b__3">
				@switch (TabKey) {
					case "content":
						<ContentView Problem="@Problem" Examples="@Examples" />
						break;
					case "submission":
						<SubmissionView />
						break;
					case "discussion":
						<DiscussionView />
						break;
				}
			</div>
		</ChildContent>
	</PageContainer>
}

@code {

	private readonly IList<TabPaneItem> _tabList = new List<TabPaneItem> {
		new() { Key = "content", Tab = "题目内容" },
		new() { Key = "submission", Tab = "评测记录" },
		new() { Key = "discussion", Tab = "提问讨论" }
	};

	[Parameter]
	public int Id { get; set; }

	private Problem? Problem { get; set; }

	private IList<TestCase>? Examples { get; set; }

	private UserProblemSummary? Summary { get; set; }

	[Inject]
	private NavigationManager Navigator { get; set; }

	[Inject]
	private ModalService ModalService { get; set; }

	[Inject]
	private MessageService MessageService { get; set; }

	[Inject]
	private ApiClient Api { get; set; }

	private string TabKey { get; set; } = "content";

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		try {
			Problem = (await Api.GetProblemAsync(Id)).Result;
			Examples = (await Api.GetExampleTestCasesAsync(Id)).Result;
			Summary = (await Api.GetProblemSummaryAsync(Id)).Result;
		}
		catch { }
	}

	private async Task<Files?> ShowUploadModal(ModalOptions options,UploadModalArgument argument) {
		var modal = await ModalService.CreateModalAsync<UploadModal, UploadModalArgument, Files?>(options, argument);
		TaskCompletionSource<Files?> taskSource = new();
		modal.OnOk = modal.OnCancel = result => {
			taskSource.SetResult(result);
			return Task.CompletedTask;
		};
		return await taskSource.Task;
	} 

	private void OnTabChange(string key) => TabKey = key;

	private async Task OnSubmitButtonClick(bool test) {
		var options = new ModalOptions {
			Title = Problem!.Manual ? "上传作业文件" : "上传源文件",
			OkText = "提交",
			CancelText = "取消",
			Draggable = true
		};
		var argument = new UploadModalArgument {
			Accept = Problem.Manual ? "" : ".cpp",
			Multiple = Problem.Manual
		};
		var files = await ShowUploadModal(options, argument);
		if (files is null)
			return;
		try {
			var resp = await Api.SubmitAsync(new NewSubmission {
				Test = test,
				ProblemId = Id,
				Files = files
			});
			var _ = MessageService.Success($"提交成功，ID为{resp.Result.Id}");
			Navigator.NavigateTo($"/submission/{resp.Result.Id}/result");
		}
		catch (ApiException ex) {
			Console.WriteLine(JsonConvert.SerializeObject(ex, Formatting.Indented));
			var _ = MessageService.Error($"提交失败：{ex.Message}");
		}
	}

}