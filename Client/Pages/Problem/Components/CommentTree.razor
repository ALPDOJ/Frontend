@namespace Client.Pages.Problem
@using TrueMogician.Extensions.Collections.Tree
@using Client.Utils
@using TrueMogician.Exceptions
@using Comment = Client.Api.Comment

<Comment 
	@ref="@CommentElement" 
	Author="@Comment.Author.GetDisplayingName()"
	Datetime="@Formatter.FormatDateTimeRelatively(Comment.Time,smallestUnit: Formatter.TimeSpanUnit.Minute)" 
	Style="@Style"
	Actions="@Actions">
	<AvatarTemplate>
		@if (!string.IsNullOrEmpty(Comment.Author.Avatar)) {
			<Avatar Src="@Comment.Author.Avatar" />
		}
		else {
			<Avatar>@Comment.Author.GetDisplayingName()</Avatar>
		}
	</AvatarTemplate>
	<ContentTemplate>
		@if (Comment.Content is null) {
			<span><i>该内容已被删除</i></span>
		}
		else {
			<RichTextDisplayer Value="@Comment.Content" />
		}
	</ContentTemplate>
	<ChildContent>
		@if (!Node.IsLeaf) {
			@foreach (var child in Node.Children) {
				<CommentTree Node="@child" Style="@DisplayStyle" OnReply="@OnReply"/>
			}
		}
	</ChildContent>
</Comment>

<style lang="css" scoped>
	.more-reactions-dropdown-overlay > span {
		margin: 0 2px;
	}
</style>

@code {

	private bool _childrenFetched = false;

	[Parameter]
	public ValuedTreeNode<Comment> Node { get; set; }

	[Parameter]
	public string Style { get; set; }

	[Parameter]
	public EventCallback<int> OnReply { get; set; }

	[CascadingParameter]
	public User CurrentUser { get; set; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private ErrorHandler ErrorHandler { get; init; }

	[Inject]
	private MessageService MessageService { get; init; }

	private AntDesign.Comment CommentElement { get; set; }

	private bool RepliesVisible { get; set; }

	private List<Reaction> CurrentReactions { get; set; } = new();

	private int ChildrenCount => _childrenFetched ? Node.Children.Count : Comment.Replies;

	private Comment Comment => Node.Value;

	private string DisplayStyle => RepliesVisible ? "" : "display: none";

	private RenderFragment ReplyAction =>
		@<span onclick="@(() => OnReply.InvokeAsync(Comment.Id))">回复</span>;

	private RenderFragment DeleteAction =>
		@<span>
			<AntDesign.Tooltip Title="@("删除")">
				<Icon Type="@IconType.Outline.Delete" OnClick="DeleteComment" />
			</AntDesign.Tooltip>
		</span>;

	private RenderFragment CollapseAction =>
		@<span onclick="@CollapseReplies">
			@(RepliesVisible ? "收起评论":$"评论({ChildrenCount})")
		</span>;

	private RenderFragment[] Actions {
		get {
			var result = new List<RenderFragment> { ReplyAction };
			if (Comment.Content is not null && (CurrentUser.Role != Role.Student || CurrentUser.Id == Comment.Author.Id))
				result.Add(DeleteAction);
			if (ChildrenCount > 0)
				result.Add(CollapseAction);
			if (Comment.Content is null)
				return result.ToArray();
			bool ShouldShow(Reaction r) => (r is Reaction.Like or Reaction.Dislike) || Comment.GetReactionCount(r) > 0;
			result.AddRange(Enum.GetValues<Reaction>().Where(ShouldShow).Select(r => RenderReactAction(r)));
			result.Add(RenderMoreReactions(Enum.GetValues<Reaction>().Where(r => !ShouldShow(r))));
			return result.ToArray();
		}
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		if (Comment.Reactions is not null)
			CurrentReactions.AddRange(Comment.Reactions.Keys.Where(k => Comment.Reactions[k].Contains(CurrentUser.Id)).Select(Enum.Parse<Reaction>));
	}

	private RenderFragment RenderReactAction(Reaction reaction, bool useButton = true) {
		var title = reaction switch {
			Reaction.Like => "点赞",
			Reaction.Dislike => "点踩",
			Reaction.Laugh => "笑死",
			Reaction.Embarrass => "差不多得了",
			Reaction.Angry => "愤怒",
			Reaction.Doge => "狗头",
			Reaction.Surprise => "惊喜",
			Reaction.Hooray => "好耶",
			Reaction.Question => "?",
			Reaction.Heart => "比心",
			Reaction.Rocket => "火箭",
			Reaction.Applause => "鼓掌",
			_ => throw new EnumValueOutOfRangeException(typeof(Reaction))
		};
		var icon = reaction switch{
			Reaction.Like => "👍",
			Reaction.Dislike => "👎",
			Reaction.Laugh => "🤣",
			Reaction.Embarrass => "😅",
			Reaction.Angry => "😡",
			Reaction.Hooray => "🎉",
			Reaction.Question => "❓",
			Reaction.Heart => "❤",
			Reaction.Rocket => "🚀",
			Reaction.Applause => "👏",
			Reaction.Doge or Reaction.Surprise => null,
			_ => throw new EnumValueOutOfRangeException(typeof(Reaction))
		};
		RenderFragment content = 
			@<span>
				@if (icon is null) {
					<img src="@($"/assets/reactions/{Enum.GetName(reaction)}.png")" height="18" style="margin-bottom: 3px" />
				}
				else {
					@icon
				}
				@if (Comment.GetReactionCount(reaction) is var count and > 0) {
					<Text>@count</Text>
				}
			</span>;
		return
			@<span style="margin: 0 3px">
				@if (useButton) {
					<AntDesign.Tooltip Title="@title">
						<Button
							Type="@(CurrentReactions.Contains(reaction) ? ButtonType.Primary : ButtonType.Default)"
							Size="@ButtonSize.Small"
							Shape="@ButtonShape.Round"
							Style="padding: 0 6px"
							OnClick="@(() => ReactToComment(reaction))">
							@content
						</Button>
					</AntDesign.Tooltip>
				}
				else {
					<span style="cursor: pointer" onclick="@(() => ReactToComment(reaction))">
						@content
					</span>
				}
			</span>;
	}

	private RenderFragment RenderMoreReactions(IEnumerable<Reaction> reactions) =>
		@<Dropdown Placement="@Placement.Right" Trigger="new []{Trigger.Click}">
			<Overlay>
				<div class="more-reactions-dropdown-overlay" style="display: flex">
					@foreach (var reaction in reactions) {
						@RenderReactAction(reaction, false)
					}
				</div>
			</Overlay>
			<ChildContent>
				<Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle">
					···
				</Button>
			</ChildContent>
		</Dropdown>;

	private async Task CollapseReplies() {
		if (!RepliesVisible && !_childrenFetched) {
			var children = (await Api.GetProblemCommentsAsync(Comment.ProblemId, Comment.Id)).Result;
			Node.Children.AddRange(children.Select(c => new ValuedTreeNode<Comment>(c)));
			_childrenFetched = true;
		}
		RepliesVisible = !RepliesVisible;
		StateHasChanged();
	}

	private async Task ReactToComment(Reaction reaction) {
		var newReactions = CurrentReactions.ToHashSet();
		var remove = newReactions.Contains(reaction);
		bool mutex = false;
		if (remove)
			newReactions.Remove(reaction);
		else {
			mutex = reaction switch {
				Reaction.Like    => newReactions.Remove(Reaction.Dislike),
				Reaction.Dislike => newReactions.Remove(Reaction.Like),
				_                => false
				};
			newReactions.Add(reaction);
		}
		try {
			await Api.ReactToCommentAsync(Comment.ProblemId, Comment.Id, newReactions);
			var commentReactions = Comment.Reactions?.TryGetValue(Enum.GetName(reaction)!, out var result) == true ? result! : new List<int>();
			if (remove)
				commentReactions.Remove(CurrentUser.Id);
			else
				commentReactions.Add(CurrentUser.Id);
			if (mutex) 
				Comment.Reactions![Enum.GetName(reaction == Reaction.Like ? Reaction.Dislike : Reaction.Like)!].Remove(CurrentUser.Id);
			CurrentReactions = newReactions.ToList();
			StateHasChanged();
		}
		catch (ApiException ex) {
			if (!ErrorHandler.Handle(ex))
				throw;
		}
	}

	private async Task DeleteComment() {
		try {
			await Api.DeleteCommentAsync(Comment.ProblemId, Comment.Id);
			Comment.Content = null;
			var _ = MessageService.Success("删除成功");
		}
		catch (ApiException ex) {
			var _ = MessageService.Error($"删除失败: {ex.Message}");
		}
	}
}
