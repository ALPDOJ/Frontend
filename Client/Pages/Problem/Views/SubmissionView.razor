@namespace Client.Pages.Problem

<Card Bordered Loading="@Loading">
	<Table DataSource="@Data"
		Loading="@Loading"
		TItem="(Submission, ScoreSummary)">
		<AntDesign.Column @bind-Field="@context.Item1.Id" TData="int" Title="提交序号">
			<a href="@($"/submission/{context.Item1.Id}/result")">@context.Item1.Id</a>
		</AntDesign.Column>
		<AntDesign.Column @bind-Field="@context.Item1.Timestamp" Filterable Sortable TData="DateTime" Title="提交时间">
			<a href="@($"/submission/{context.Item1.Id}/result")">@context.Item1.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</a>
		</AntDesign.Column>
		<AntDesign.Column @bind-Field="@context.Item1.Test" Filterable Sortable TData="bool" Title="提交模式">
			@if (context.Item1.Test) {
				<Tag PresetColor="@PresetColor.GeekBlue">测试提交</Tag>
			}
			else if (context.Item1.Final) {
				<Tag PresetColor="@PresetColor.Gold">最终提交</Tag>
			}
			else {
				<Tag PresetColor="@PresetColor.Lime">正式提交</Tag>
			}
		</AntDesign.Column>
		@if (ProblemSummary.Manual) {
			<AntDesign.Column Field="@context.Item2.Review.HasValue" Filterable Sortable TData="bool" Title="批阅状态">
				@if (context.Item2.Review.HasValue) {
					<Tag PresetColor="@PresetColor.Green">已批阅</Tag>
				}
				else {
					<Tag Color="Azure3">未批阅</Tag>
				}
			</AntDesign.Column>
		}
		else {
			<AntDesign.Column Field="@context.Item2.GetTotalScore()" Sortable TData="double" Title="分数">
				<AntDesign.Progress
					Percent="@(context.Item2.GetTotalScore() * 100 / ProblemSummary.TotalScore)"
					Status="@GetProgressStatus(context.Item2)"
					StrokeWidth="6"
					Style="width: 180px" />
			</AntDesign.Column>
		}
	</Table>
</Card>

@code {

	[Parameter]
	public UserProblemSummary ProblemSummary { get; set; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private LocalStorageManager LocalStorageManager { get; init; }

	private IList<(Submission, ScoreSummary)>? Data { get; set; }

	private bool Loading { get; set; } = true;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		int userId = (await LocalStorageManager.GetCurrentUser()).Id;
		var submission = (await Api.GetSubmissionsAsync(userId, ProblemSummary.Id)).Result;
		Data = new List<(Submission, ScoreSummary)>(submission.Count);
		await Task.WhenAll(submission.Select(async (s, i) => Data[i] = (s, (await Api.GetSubmissionScoreAsync(s.Id)).Result)));
		Loading = false;
	}

	private ProgressStatus GetProgressStatus(ScoreSummary scoreSummary) {
		double score = scoreSummary.GetTotalScore();
		return Math.Abs(ProblemSummary.TotalScore - score) < double.Epsilon ? ProgressStatus.Success : ProgressStatus.Exception;
	}

}