@namespace Client.Pages.Problem
@using Comment = Client.Api.Comment
@using TrueMogician.Extensions.Collections.Tree

<Card Bordered>
	<CascadingValue IsFixed Value="@CurrentUser">
		@if (Comments?.Count > 0) {
			@foreach (var node in CommentNodes) {
				<CommentTree Node="@node" OnReply="@OnReply" />
			}
		}
	</CascadingValue>

	<Comment>
		<AvatarTemplate>
			@if (string.IsNullOrEmpty(CurrentUserAvatar)) {
				<Avatar>@CurrentUser.GetDisplayingName()</Avatar>
			}
			else {
				<Avatar Src="@CurrentUserAvatar" />
			}
		</AvatarTemplate>
		<ContentTemplate>
			<TextArea @bind-Value="@CommentContent" MaxLength="256" @ref="TextAreaElement" ShowCount></TextArea>
			<div style="display: flex; justify-content: right; margin-top: 24px;">
				@if (RepliedCommentId.HasValue) {
					<Button OnClick="() => RepliedCommentId = null" Style="margin-right: 12px" Type="@ButtonType.Primary">
						取消回复
					</Button>
				}
				<Button OnClick="SubmitComment" Type="@ButtonType.Primary">
					@(RepliedCommentId.HasValue ? "回复" : "发布")
				</Button>
			</div>
		</ContentTemplate>
	</Comment>
</Card>

@code {
	[Parameter]
	public int ProblemId { get; set; }

	[Inject]
	public ApiClient Api { get; init; }

	[Inject]
	public LocalStorageManager LocalStorageManager { get; init; }

	private User CurrentUser { get; set; }

	private string? CurrentUserAvatar { get; set; }

	private int? RepliedCommentId { get; set; }

	private string CommentContent { get; set; }

	private TextArea TextAreaElement { get; set; }

	private IList<Comment> Comments { get; set; }

	private IEnumerable<ValuedTreeNode<Comment>> CommentNodes => Comments.Select(c => new ValuedTreeNode<Comment>(c));

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		CurrentUser = await LocalStorageManager.GetCurrentUser();
		CurrentUserAvatar = await LocalStorageManager.GetCurrentUserAvatar();
		Comments = (await Api.GetProblemCommentsAsync(ProblemId, null)).Result;
	}

	private async Task OnReply(int id) {
		RepliedCommentId = id;
		await TextAreaElement.Focus();
	}

	private async Task SubmitComment() {
		var content = new RichText {
			Format = RichTextFormat.Raw,
			Content = CommentContent
		};
		var resp = await Api.CommentProblemAsync(ProblemId, new NewComment {
			ReplyTo = RepliedCommentId,
			Content = content
		});
		var newComment = new Comment {
			Id = resp.Result.Id,
			ProblemId = ProblemId,
			Time = resp.Result.Time,
			Content = content,
			ReplyTo = RepliedCommentId,
			Author = new CommentAuthor {
				Id = CurrentUser.Id,
				Username = CurrentUser.Username,
				Avatar = CurrentUserAvatar
			}
		};
		Comments.Add(newComment);
		if (RepliedCommentId.HasValue) {
			foreach (var root in CommentNodes) {
				var target = root.FirstOrDefault(n => n.Value.Id == RepliedCommentId.Value);
				if (target is not null) {
					target.Children.Add(new ValuedTreeNode<Comment>(newComment));
					break;
				}
			}
		}
		CommentContent = "";
		RepliedCommentId = null;
		StateHasChanged();
	}

}