@namespace Client.Pages
@page "/assignment"
@using TrueMogician.Extensions.Enumerable
@using TrueMogician.Extensions.Number

<div class="assignment-list">
	<Card>
		<Row Gutter="24">
			<Col Sm="6" Xs="24">
				@RenderHeaderInfo("已完成", ProblemSummaries?.Count(CompletedFilter).ToString(), true)
			</Col>
			<Col Sm="6" Xs="24">
				@RenderHeaderInfo("进行中", ProblemSummaries?.Count(OngoingFilter).ToString(), true)
			</Col>
			<Col Sm="6" Xs="24">
				@RenderHeaderInfo("已延期", ProblemSummaries?.Count(DelayedFilter).ToString(), true)
			</Col>
			<Col Sm="6" Xs="24">
				@if (ProblemSummaries is null) {
					@RenderHeaderInfo("最近截止日期", null)
				}
				else if (LatestDeadline.HasValue) {
					<CountDown Class="header-info" Title="最近截止日期" Value="@LatestDeadline.Value" Format="dd:hh:mm:ss" OnFinish="StateHasChanged" />
				}
				else {
					@RenderHeaderInfo("最近截止日期", "无")
				}
			</Col>
		</Row>
	</Card>

	<Card Title="题目" Style="margin-top: 24px" BodyStyle="padding: 0 32px 40px 32px">
		<Extra>
			<div class="extra-content" style="display: flex">
				<RadioGroup @bind-Value="StatusFilter" Class="filter-ratio-group" Style="display: flex">
					<Radio RadioButton Value="@ProblemStatusFilter.All">所有</Radio>
					<Radio RadioButton Value="@ProblemStatusFilter.Delayed">已延期</Radio>
					<Radio RadioButton Value="@ProblemStatusFilter.Ongoing">进行中</Radio>
					<Radio RadioButton Value="@ProblemStatusFilter.Completed">已完成</Radio>
				</RadioGroup>
				<SimpleSelect 
					@bind-Values="@SearchedTags" 
					Mode="multiple" 
					Placeholder="请选择标签" 
					EnableSearch
					AllowClear
					Class="extra-content-select"
					OnSelectedItemsChanged="@OnSearchedTagsChanged">
					<SelectOptions>
						@if (Tags is not null) {
							@foreach (var tag in Tags) {
								<SimpleSelectOption Label="@tag" Value="@tag" />
							}
						}
					</SelectOptions>
				</SimpleSelect>
			</div>
		</Extra>
		<ChildContent>
			<Table TItem="UserProblemSummary" DataSource="DisplayedProblemSummaries">
				<AntDesign.Column TData="int" @bind-Field="@context.Id" Title="序号" Align="@ColumnAlign.Center" Sortable Filterable />
				<AntDesign.Column TData="string" @bind-Field="@context.Title" Title="标题" Align="ColumnAlign.Center" Sortable Filterable>
					<a href="@($"/problem/{context.Id}")">@context.Title</a>
				</AntDesign.Column>
				<AntDesign.Column TData="IList<string>" Field="@context.Tags" Title="标签" Align="ColumnAlign.Center">
					<div>
						@foreach (var tag in context.Tags) {
							<Tag>@tag</Tag>
						}
					</div>
				</AntDesign.Column>
				<AntDesign.Column TData="int" Field="@(context.Times - context.SubmittedTimes)" Title="剩余次数" Align="ColumnAlign.Center" Sortable Filterable />
				<AntDesign.Column TData="DateTime" @bind-Field="@context.Deadline" Title="截止日期" Align="ColumnAlign.Center" Format="yyyy-MM-dd HH:mm:ss" Sortable Filterable />
				<AntDesign.Column TData="double" Field="@(context.Score ?? 0)" Title="当前分数" Align="ColumnAlign.Center" Sortable Filterable>
					<AntDesign.Progress 
						Percent="@((context.Score ?? 0) * 100 / context.TotalScore)" 
						Status="@GetProgressStatus(context)" 
						StrokeWidth="6" 
						Style="width: 180px" />
				</AntDesign.Column>
			</Table>
		</ChildContent>
	</Card>
</div>

<style lang="css" scoped>
	.assignment-list .header-info {
		position: relative;
		text-align: center;
	}

	.assignment-list .header-info > span {
		opacity: 0.45;
		display: inline-block;
		font-size: 14px;
		line-height: 22px;
		margin-bottom: 4px;
	}

	.assignment-list .header-info > p {
		opacity: 0.85;
		font-size: 24px;
		line-height: 32px;
		margin: 0;
	}

	.assignment-list .header-info > em {
		background-color: #f0f0f0;
		height: 56px;
		position: absolute;
		right: 0;
		top: 0;
		width: 1px;
	}

	.assignment-list .extra-content-select {
		margin-left: 16px;
		width: 272px;
		min-width: 200px;
	}

	.assignment-list .filter-ratio-group span {
		white-space: nowrap;
	}

	@@media screen and (max-width: 576px) {
		.assignment-list .header-info {
			margin-bottom: 16px;
		}

		.assignment-list .header-info > em {
			display: none;
		}

		.assignment-list .extra-content-select {
			margin-left: 0;
			width: 100%;
		}
	}
</style>

@code {
	private static readonly Func<UserProblemSummary, bool> DelayedFilter = p => p.Deadline <= DateTimeOffset.Now && p.SubmittedTimes == 0;

	private static readonly Func<UserProblemSummary, bool> OngoingFilter = p => p.Deadline > DateTimeOffset.Now && p.SubmittedTimes < p.Times && (!p.Score.HasValue || !p.TotalScore.EqualsWithTolerance(p.Score.Value, 1e-3f));

	private static readonly Func<UserProblemSummary, bool> CompletedFilter = p => p.SubmittedTimes == p.Times || (p.Deadline <= DateTimeOffset.Now && p.SubmittedTimes > 0) || (p.Score.HasValue && p.TotalScore.EqualsWithTolerance(p.Score.Value, 1e-3f));

	private ProblemStatusFilter _statusFilter;

	[Inject]
	protected ApiClient Api { get; init; }

	private ICollection<UserProblemSummary>? ProblemSummaries { get; set; }

	private ICollection<UserProblemSummary> DisplayedProblemSummaries { get; set; }

	private List<string>? Tags { get; set; }

	private ProblemStatusFilter StatusFilter {
		get => _statusFilter;
		set {
			if (value != _statusFilter) {
				_statusFilter = value;
				FilterProblemSummaries();
			}
		}
	}

	private IEnumerable<string> SearchedTags { get; set; } = Enumerable.Empty<string>();

	private DateTime? LatestDeadline {
		get {
			if (ProblemSummaries is null)
				return null;
			var comingDeadlines = ProblemSummaries.Select(p => p.Deadline).Where(d => d > DateTimeOffset.Now).ToArray();
			return comingDeadlines.Length == 0 ? null : comingDeadlines.Min();
		}
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var assignmentSummaries = (await Api.GetAssignmentSummariesAsync()).Result.AsArray();
		Array.Sort(assignmentSummaries, (a, b) => b.Priority - a.Priority);
		ProblemSummaries = assignmentSummaries.SelectMany(a => a.Tasks).ToHashSet(new UserProblemSummaryComparer()).ToArray();
		Tags = ProblemSummaries.SelectMany(s => s.Tags).Distinct().ToList();
		DisplayedProblemSummaries = ProblemSummaries;
		StatusFilter = ProblemStatusFilter.All;
	}

	private static ProgressStatus GetProgressStatus(UserProblemSummary summary) {
		if (summary.Score.HasValue && Math.Abs(summary.Score.Value - summary.TotalScore) < float.Epsilon)
			return ProgressStatus.Success;
		if (DateTimeOffset.Now >= summary.Deadline && summary.SubmittedTimes == 0)
			return ProgressStatus.Exception;
		if (DateTimeOffset.Now < summary.Deadline && summary.SubmittedTimes < summary.Times)
			return ProgressStatus.Active;
		return ProgressStatus.Normal;
	}

	private RenderFragment RenderHeaderInfo(string title, string? value, bool bordered = false) =>
		@<div class="header-info">
			<span>@title</span>
			@if (value is null) {
				<Spin Style="margin-left: 1em" />
			}
			else {
				<p>@value</p>
			}
			@if (bordered) {
				<em></em>
			}
		</div>;

	private void OnSearchedTagsChanged(IEnumerable<string> tags) {
		SearchedTags = tags;
		FilterProblemSummaries();
	}

	private void FilterProblemSummaries() {
		DisplayedProblemSummaries = ProblemSummaries!;
		var tags = SearchedTags.ToArray();
		if (tags.Length > 0)
			DisplayedProblemSummaries = DisplayedProblemSummaries.Where(p => tags.All(tag => p.Tags.Contains(tag))).ToArray();
		if (StatusFilter != ProblemStatusFilter.All)
			DisplayedProblemSummaries = DisplayedProblemSummaries.Where(StatusFilter switch {
				ProblemStatusFilter.Delayed => DelayedFilter,
				ProblemStatusFilter.Ongoing => OngoingFilter,
				ProblemStatusFilter.Completed => CompletedFilter
			}).ToArray();
	}

	private enum ProblemStatusFilter:byte {
		All,

		Delayed,

		Ongoing,

		Completed
	}

	private class UserProblemSummaryComparer : IEqualityComparer<UserProblemSummary> {
		public bool Equals(UserProblemSummary? x, UserProblemSummary? y) {
			if (ReferenceEquals(x, y))
				return true;
			if (ReferenceEquals(x, null))
				return false;
			if (ReferenceEquals(y, null))
				return false;
			if (x.GetType() != y.GetType())
				return false;
			return x.Id == y.Id;
		}

		public int GetHashCode(UserProblemSummary obj) => obj.Id;
	} 
}