@namespace Client.Pages
@page "/assignment"
@using TrueMogician.Extensions.Enumerable

<div class="standard-list">
	<Card>
		<Row Gutter="24">
			<AntDesign.Col Sm="6" Xs="24">
				@RenderHeaderInfo("已完成", ProblemSummaries?.Count(CompletedFilter).ToString(), true)
			</AntDesign.Col>
			<AntDesign.Col Sm="6" Xs="24">
				@RenderHeaderInfo("进行中", ProblemSummaries?.Count(OngoingFilter).ToString(), true)
			</AntDesign.Col>
			<AntDesign.Col Sm="6" Xs="24">
				@RenderHeaderInfo("已延期", ProblemSummaries?.Count(DelayedFilter).ToString(), true)
			</AntDesign.Col>
			<AntDesign.Col Sm="6" Xs="24">
				@if (ProblemSummaries is null) {
					@RenderHeaderInfo("最近截止日期", null)
				}
				else if (LatestDeadline.HasValue) {
					<CountDown Class="header-info" Title="最近截止日期" Value="@LatestDeadline.Value" Format="dd:hh:mm:ss" OnFinish="StateHasChanged" />
				}
				else {
					@RenderHeaderInfo("最近截止日期", "无")
				}
			</AntDesign.Col>
		</Row>
	</Card>

	<Card Class="list-card" Style="margin-top: 24px" BodyStyle="padding: 0 32px 40px 32px" Title="题目">
		<Extra>
			<div class="extra-content" style="display: flex">
				<RadioGroup @bind-Value="StatusFilter" Class="filter-ratio-group" Style="display: flex">
					<Radio RadioButton Value="@ProblemStatusFilter.All">所有</Radio>
					<Radio RadioButton Value="@ProblemStatusFilter.Delayed">已延期</Radio>
					<Radio RadioButton Value="@ProblemStatusFilter.Ongoing">进行中</Radio>
					<Radio RadioButton Value="@ProblemStatusFilter.Completed">已完成</Radio>
				</RadioGroup>
				<Search @bind-Value="SearchKeyword" Placeholder="请输入关键字" Class="extra-content-search"/>
			</div>
		</Extra>
		<ChildContent>
			<AntList TItem="UserProblemSummary" DataSource="DisplayedProblemSummaries" ItemLayout="ListItemLayout.Horizontal">
				<ListItem>
					<ListItemMeta>
						<TitleTemplate>
							<a href="@($"/problem/{context.Id}")">@context.Title</a>
						</TitleTemplate>
					</ListItemMeta>
					<div class="list-content">
						<div class="list-content-item">
							<span>剩余次数</span>
							<p>@(context.Times - context.SubmittedTimes)</p>
						</div>
						<div class="list-content-item">
							<span>@(context.Deadline < DateTimeOffset.Now ? "已过期" : "剩余时间")</span>
							<p>@((context.Deadline - DateTimeOffset.Now).Duration().ToString(@"d\天h\时m\分"))</p>
						</div>
						<div class="list-content-item">
							<AntDesign.Progress Percent="@((context.Score ?? 0) * 100 / context.TotalScore)"
								Status="@GetProgressStatus(context)" StrokeWidth="6" Style="width: 180px;" />
						</div>
					</div>
				</ListItem>
			</AntList>
		</ChildContent>
	</Card>
</div>

<style lang="css" scoped>
	.standard-list .ant-card-head { border-bottom: none; }

	.standard-list .ant-card-head-title {
		line-height: 32px;
		padding: 24px 0;
	}

	.standard-list .ant-card-extra { padding: 24px 0; }

	.standard-list .ant-list-pagination {
		margin-top: 24px;
		text-align: right;
	}

	.standard-list .ant-avatar-lg {
		height: 48px;
		line-height: 48px;
		width: 48px;
	}

	.standard-list .header-info {
		position: relative;
		text-align: center;
	}

	.standard-list .header-info > span {
		opacity: 0.45;
		display: inline-block;
		font-size: 14px;
		line-height: 22px;
		margin-bottom: 4px;
	}

	.standard-list .header-info > p {
		opacity: 0.85;
		font-size: 24px;
		line-height: 32px;
		margin: 0;
	}

	.standard-list .header-info > em {
		background-color: #f0f0f0;
		height: 56px;
		position: absolute;
		right: 0;
		top: 0;
		width: 1px;
	}

	.standard-list .list-content {
		font-size: 0;
		display: flex;
	}

	.standard-list .list-content .list-content-item {
		display: flex;
		flex-direction: column;
		font-size: 14px;
		margin-left: 40px;
		align-items: center;
		justify-content: center;
	}

	.standard-list .list-content .list-content-item > span { line-height: 20px; }

	.standard-list .list-content .list-content-item > p {
		line-height: 22px;
		margin-bottom: 0;
		margin-top: 4px;
	}

	.standard-list .extra-content-search {
		margin-left: 16px;
		width: 272px;
	}

	.standard-list .filter-ratio-group span { white-space: nowrap; }

	@@media screen and (max-width: 480px) {
		.standard-list .ant-list-item-content {
			display: block;
			flex: none;
			width: 100%;
		}

		.standard-list .ant-list-item-action { margin-left: 0; }

		.standard-list .list-content { margin-left: 0; }

		.standard-list .list-content > div { margin-left: 0; }

		.standard-list .list-card .ant-card-head-title { overflow: visible; }
	}

	@@media screen and (max-width: 576px) {
		.standard-list .extra-content-search {
			margin-left: 0;
			width: 100%;
		}

		.standard-list .header-info { margin-bottom: 16px; }

		.standard-list .header-info > em { display: none; }
	}

	@@media screen and (max-width: 768px) {
		.standard-list .list-content > div { display: block; }

		.standard-list .list-content > div:last-child {
			top: 0;
			width: 100%;
		}

		.list-card .ant-radio-group {
			display: block;
			margin-bottom: 8px;
		}
	}

	@@media screen and (max-width: 992px) and (min-width: 768px) {
		.standard-list .list-content > div { display: block; }

		.standard-list .list-content > div:last-child {
			top: 0;
			width: 100%;
		}
	}

	@@media screen and (max-width: 1200px) {
		.standard-list .list-content > div { margin-left: 24px; }

		.standard-list .list-content > div:last-child { top: 0; }
	}

	@@media screen and (max-width: 1400px) {
		.standard-list .list-content { text-align: right; }

		.standard-list .list-content > div:last-child { top: 0; }
	}

	.standard-listForm .ant-form-item { margin-bottom: 12px; }

	.standard-listForm .ant-form-item:last-child {
		margin-bottom: 32px;
		padding-top: 4px;
	}

	.formResult { width: 100%; }

	.formResult [class^='title'] { margin-bottom: 8px; }
</style>

@code {
	private static readonly Func<UserProblemSummary, bool> DelayedFilter = p => p.Deadline <= DateTimeOffset.Now && p.SubmittedTimes == 0;

	private static readonly Func<UserProblemSummary, bool> OngoingFilter = p => p.Deadline > DateTimeOffset.Now && p.SubmittedTimes < p.Times;

	private static readonly Func<UserProblemSummary, bool> CompletedFilter = p => p.SubmittedTimes == p.Times || (p.Deadline <= DateTimeOffset.Now && p.SubmittedTimes > 0);

	private ICollection<UserProblemSummary>? ProblemSummaries { get; set; }

	private ProblemStatusFilter _statusFilter;

	private string _searchKeyword;

	[Inject]
	protected ApiClient Api { get; set; }

	private ICollection<UserProblemSummary> DisplayedProblemSummaries { get; set; }

	private ProblemStatusFilter StatusFilter {
		get => _statusFilter;
		set {
			if (value != _statusFilter) {
				_statusFilter = value;
				FilterProblemSummaries();
			}
		}
	}

	private string SearchKeyword {
		get => _searchKeyword;
		set{
			if (value != _searchKeyword) {
				_searchKeyword = value;
				FilterProblemSummaries();
			}
		}
	}

	private DateTime? LatestDeadline {
		get {
			if (ProblemSummaries is null)
				return null;
			var comingDeadlines = ProblemSummaries.Select(p => p.Deadline).Where(d => d > DateTimeOffset.Now).ToArray();
			return comingDeadlines.Length == 0 ? null : comingDeadlines.Min();
		}
	}

	protected override async Task OnParametersSetAsync() {
		await base.OnParametersSetAsync();
		var assignmentSummaries = (await Api.GetAssignmentSummariesAsync()).Result.AsArray();
		Array.Sort(assignmentSummaries, (a, b) => b.Priority - a.Priority);
		ProblemSummaries = assignmentSummaries.SelectMany(a => a.Tasks).ToHashSet(new UserProblemSummaryComparer()).ToArray();
		DisplayedProblemSummaries = ProblemSummaries;
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		StatusFilter = ProblemStatusFilter.All;
	}

	private static ProgressStatus GetProgressStatus(UserProblemSummary summary) {
		if (summary.Score.HasValue && Math.Abs(summary.Score.Value - summary.TotalScore) < float.Epsilon)
			return ProgressStatus.Success;
		if (DateTimeOffset.Now >= summary.Deadline && summary.SubmittedTimes == 0)
			return ProgressStatus.Exception;
		if (DateTimeOffset.Now < summary.Deadline && summary.SubmittedTimes < summary.Times)
			return ProgressStatus.Active;
		return ProgressStatus.Normal;
	}

	private RenderFragment RenderHeaderInfo(string title, string? value, bool bordered = false) =>
		@<div class="header-info">
			<span>@title</span>
			@if (value is null) {
				<Spin Style="margin-left: 1em" />
			}
			else {
				<p>@value</p>
			}
			@if (bordered) {
				<em></em>
			}
		</div>;

	private void FilterProblemSummaries() {
		DisplayedProblemSummaries = ProblemSummaries!;
		if (!string.IsNullOrEmpty(SearchKeyword))
			DisplayedProblemSummaries = DisplayedProblemSummaries.Where(p => p.Title.Contains(SearchKeyword)).ToArray();
		if (StatusFilter != ProblemStatusFilter.All)
			DisplayedProblemSummaries = DisplayedProblemSummaries.Where(StatusFilter switch {
				ProblemStatusFilter.Delayed => DelayedFilter,
				ProblemStatusFilter.Ongoing => OngoingFilter,
				ProblemStatusFilter.Completed => CompletedFilter
			}).ToArray();
	}

	private enum ProblemStatusFilter:byte {
		All,

		Delayed,

		Ongoing,

		Completed
	}

	private class UserProblemSummaryComparer : IEqualityComparer<UserProblemSummary> {
		public bool Equals(UserProblemSummary? x, UserProblemSummary? y) {
			if (ReferenceEquals(x, y))
				return true;
			if (ReferenceEquals(x, null))
				return false;
			if (ReferenceEquals(y, null))
				return false;
			if (x.GetType() != y.GetType())
				return false;
			return x.Id == y.Id;
		}

		public int GetHashCode(UserProblemSummary obj) => obj.Id;
	} 
}