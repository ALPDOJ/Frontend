@namespace Client.Pages.Problem
@page "/problem/{Id:int}"

<PageContainer Class="pageHeader" TabList="_tabList" OnTabChange="OnTabChange" Title="@Problem.Title" >
	<Extra>
		<ButtonGroup>
			<Button>讨论</Button>
		</ButtonGroup>
		<ButtonGroup>
			<Button Type="@ButtonType.Primary">测试</Button>
			<Button Type="@ButtonType.Primary">提交</Button>
		</ButtonGroup>
	</Extra>
	<ExtraContent>
		<div class="moreInfo">
			<Statistic Title="@("剩余次数")" Value="@(Summary.Times - Summary.SubmittedTimes)" />
			<Statistic Title="@("当前分数")" Value="@($"{Summary.Score ?? 0} / {Summary.TotalScore}")" />
		</div>
	</ExtraContent>
	<Content>
		<Descriptions Class="headerList" Column="2" Size="small">
			<DescriptionsItem Title="@("题目序号")">@Problem.Id</DescriptionsItem>
			<DescriptionsItem Title="@("题目标签")">
				@foreach (var tag in Problem.Tags) {
					<Tag>@tag</Tag>
				}
			</DescriptionsItem>
			<DescriptionsItem Title="@("人工批阅")">@(Problem.Manual ? "是" : "否")</DescriptionsItem>
			<DescriptionsItem Title="@("截止日期")">@Summary.Deadline.ToString("yyyy-MM-dd hh:mm:ss")</DescriptionsItem>
			<DescriptionsItem Title="@("运行时间限制")">@($"{Problem.Limits.Time} ms")</DescriptionsItem>
			<DescriptionsItem Title="@("运行内存限制")">@FormatMemoryLimit(Problem.Limits.Memory)</DescriptionsItem>
		</Descriptions>
	</Content>

	<ChildContent>
		<div class="main__b__3">
			@switch (TabKey) {
				case "content":
					<ContentView Data="Problem" />
					break;
				case "submission":
					<SubmissionView />
					break;
				case "discussion":
					<DiscussionView />
					break;
			}
		</div>
	</ChildContent>
</PageContainer>

@code {

	private readonly IList<TabPaneItem> _tabList = new List<TabPaneItem> {
		new() { Key = "content", Tab = "题目内容" },
		new() { Key = "submission", Tab = "评测记录" },
		new() { Key = "discussion", Tab = "提问讨论" }
	};

	[Parameter]
	public int Id { get; set; }

	private Api.Problem Problem { get; set; } = new() {
		Id = 1,
		Title = "A+B问题",
		Manual = false,
		Tags = new[] { "入门" },
		Limits = new ProblemLimits {
			Time = 1000,
			Memory = 1 << 20,
			FileSize = 100 << 10
		},
		Content = new ProblemContent {
			Description = "这是题目描述",
			Format = new Format {
				Input = "这是输入数据格式",
				Output = "这是输出数据格式"
			},
			Examples = new [] {
				new ProblemExample {
					Input = "这是样例输入",
					Output = "这是样例输出",
					Explanation = "这是样例解释"
				}
			},
			InputRange = new [] {
				new ProblemInputRange {
					Description = "这是输入范围描述",
					TestCaseCount = 10
				}
			},
			Limitation = "这是代码限制"
		}
	};

	private UserProblemSummary Summary { get; set; } = new (){
		Id = 1,
		Title = "A+B问题",
		Manual = false,
		Tags = new []{"入门"},
		Times = 2,
		SubmittedTimes = 1,
		Deadline = DateTime.Now,
		Score = 10
	};

	[Inject]
	public ApiClient Api { get; set; }

	private string TabKey { get; set; } = "content";

	private static string FormatMemoryLimit(int limit) {
		if (limit < (1 << 10))
			return $"{limit} B";
		return limit < (1 << 20) ? $"{((float)limit) / (1 << 10):F1} KB" : $"{((float)limit) / (1 << 20):F1} MB";
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		Problem = (await Api.GetProblemAsync(Id)).Result;
		Summary = (await Api.GetProblemSummaryAsync(Id.ToString())).Result;
	}

	private void OnTabChange(string key) => TabKey = key;

}