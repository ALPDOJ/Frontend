@namespace Client.Pages.SubmissionResult
@page "/submission/{Id:int}/result"

<PageContainer Title="评测结果">
	<Extra>
		<Button Type="@ButtonType.Primary">返回题目</Button>
	</Extra>
	<ExtraContent>
		<Statistic Title="@("得分")" Value="@("10.0/10.0")" />
	</ExtraContent>
	<Content>
		<Descriptions Class="headerList" Column="2" Size="small">
			<DescriptionsItem Title="@("评测ID")">@Id</DescriptionsItem>
			<DescriptionsItem Title="@("Ordering Products")">XX Service</DescriptionsItem>
			<DescriptionsItem Title="@("Creation Time")">2017-07-07</DescriptionsItem>
			<DescriptionsItem Title="@("Associated documents")">
				<a href="">12421</a>
			</DescriptionsItem>
			<DescriptionsItem Title="@("Effective Date")">2017-07-07 ~ 2017-08-08</DescriptionsItem>
			<DescriptionsItem Title="@("Remarks")">Please confirm within two working days</DescriptionsItem>
		</Descriptions>
	</Content>
	<ChildContent>
		<div class="main__b__3">
			<GridContent>
				<Card Style="margin-bottom: 24px;" Title="@("评测进度")">
					<Steps Current="2" Direction="horizontal">
						<ChildContent>
							<Step Title="@("已提交")" />
							<Step Title="@("正在评测")" />
							<Step Title="@("评测结束")" />
						</ChildContent>
					</Steps>
				</Card>

				<Card Style="margin-bottom: 24px" BodyStyle="display: flex; flex-wrap: wrap; align-content: space-between" Title="@("测试点状态")">
					@for (int i = 0; i < 24; ++i) {
						<Card Bordered Style="width: 150px; height: 100px; text-align: center; padding: 12px; margin: 18px; background-color: green">
							Accepted
						</Card>
					}
				</Card>
			</GridContent>
		</div>
	</ChildContent>
</PageContainer>

@code {

	private static TaskFactory TaskFactory { get; } = new();

    [Parameter]
    public int Id { get; set; }

	[Parameter]
	public int? ProblemId { get; set; }

	[Parameter]
	public Problem? Problem { get; set; }

    [Inject]
    private ApiClient Api { get; set; }

	private SubmissionStatus Status { get; set; }

    private IDictionary<string, CompilerResult>? Results { get; set; }

	protected override async Task OnParametersSetAsync() {
		await base.OnParametersSetAsync();
		if (ProblemId is null && Problem is null)
			throw new ArgumentNullException("Problem information not provided");
		if (ProblemId is null)
			ProblemId = Problem!.Id;
		else 
			Problem = (await Api.GetProblemAsync(ProblemId!.Value)).Result;
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		Task.Run(async () => {
			var interval = TimeSpan.FromSeconds(0.5);
			while (true) {
				var time = DateTime.Now;
				Status = (await Api.GetSubmissionStatusAsync(Id)).Result;
				if (Status is SubmissionStatus.Judged or SubmissionStatus.Reviewed)
					break;
				var duration = DateTime.Now - time;
				if (duration < interval)
					await Task.Delay(interval - duration);
			}
		}).ContinueWith(async _ => {
			Results = (await Api.GetJudgementResultAsync(Id)).Result;
		}).ConfigureAwait(false);
	}

}
