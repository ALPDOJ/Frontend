@using Newtonsoft.Json
@using TrueMogician.Exceptions
@namespace Client.Pages.Problem

<Card Bordered Loading="@(Submissions is null)">
	@if (Submissions is not null) {
		<Table TItem="Submission" DataSource="@Submissions">
			<AntDesign.Column TData="int" @bind-Field="@context.Id" Title="提交序号" Align="ColumnAlign.Center">
				<a href="@($"/submission/{context.Id}/result")">@context.Id</a>
			</AntDesign.Column>
			<AntDesign.Column TData="DateTime" @bind-Field="@context.Timestamp" Filterable Sortable Title="提交时间" Align="ColumnAlign.Center">
				<a href="@($"/submission/{context.Id}/result")">@context.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</a>
			</AntDesign.Column>
			<AntDesign.Column TData="bool" @bind-Field="@context.Test" Filterable Sortable Title="提交模式" Align="ColumnAlign.Center">
				@if (context.Test) {
					<Tag PresetColor="@PresetColor.GeekBlue">测试提交</Tag>
				}
				else if (context.Final) {
					<Tag PresetColor="@PresetColor.Gold">最终提交</Tag>
				}
				else {
					<Tag PresetColor="@PresetColor.Lime">正式提交</Tag>
				}
			</AntDesign.Column>
			<AntDesign.Column TData="SubmissionStatus" Field="@context.Status" Title="提交状态" Align="ColumnAlign.Center">
				@GetStatusTag(context.Status)
			</AntDesign.Column>
		</Table>
	}
</Card>

@code {

	[Parameter]
	public UserProblemSummary ProblemSummary { get; set; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private ErrorHandler ErrorHandler { get; init; }

	[Inject]
	private LocalStorageManager LocalStorageManager { get; init; }

	private IList<Submission>? Submissions { get; set; }

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		int userId = (await LocalStorageManager.GetCurrentUser()).Id;
		Submissions = (await Api.GetSubmissionsAsync(userId, ProblemSummary.Id)).Result;
	}

	private static RenderFragment GetStatusTag(SubmissionStatus status) {
		var (color, text) = status switch {
			SubmissionStatus.Submitted => ("Violet","已提交"),
			SubmissionStatus.Queueing => ("Gray","排队中"),
			SubmissionStatus.Judging => ("DeepSkyBlue","评测中"),
			SubmissionStatus.Judged => ("SpringGreen","已测完"),
			SubmissionStatus.Reviewed => ("Gold","已批阅"),
			SubmissionStatus.Aborted => ("Crimson","评测异常"),
			_ => throw new EnumValueOutOfRangeException(typeof(SubmissionStatus), status)
		};
		return @<Tag Color="@color">@text</Tag>;
	}

	private ProgressStatus GetProgressStatus(ScoreSummary scoreSummary) {
		double score = scoreSummary.GetTotalScore();
		return Math.Abs(ProblemSummary.TotalScore - score) < double.Epsilon ? ProgressStatus.Success : ProgressStatus.Exception;
	}

}