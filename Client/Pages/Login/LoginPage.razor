@namespace Client.Pages
@page "/login"
@layout LoginLayout
@using Blazored.LocalStorage
@using Newtonsoft.Json

<div class="main__b__0">
	<div class="login">
		<Form Model="@Parameters" OnFinish="OnSubmit">
			<FormItem Required>
				<AntDesign.Input @bind-Value="@context.Id" Placeholder="学号" Size="@InputSize.Large" Class="input">
					<Prefix>
						<Icon Type="user" />
					</Prefix>
				</AntDesign.Input>
			</FormItem>
			<FormItem Required>
				<AntDesign.Input @bind-Value="@context.Password" Placeholder="密码" Size="@InputSize.Large"
					Type="password" Class="input">
					<Prefix>
						<Icon Type="lock" />
					</Prefix>
				</AntDesign.Input>
			</FormItem>
			<div>
				<Checkbox @bind-Value="@AutoLogin">
					自动登录
				</Checkbox>
				<a style="float: right;">
					忘记密码
				</a>
			</div>
			<Button
				Block
				Loading="@LoggingIn"
				HtmlType="submit"
				Size="@ButtonSize.Large"
				Type="@ButtonType.Primary"
				Class="submit">
				登录
			</Button>
		</Form>
	</div>
</div>

<style lang="css" scoped>
	.main__b__0 {
		margin: 0 auto;
		width: 368px;
	}

	.main__b__0 .login .icon { color: #1890ff; }

	.main__b__0 .login .other {
		line-height: 22px;
		margin-top: 24px;
		text-align: left;
	}

	.main__b__0 .login .other .icon {
		color: rgba(0, 0, 0, 0.45);
		cursor: pointer;
		font-size: 24px;
		margin-left: 16px;
		transition: color 0.3s;
		vertical-align: middle;
	}

	.main__b__0 .login .other .icon:hover { color: #1890ff; }

	.main__b__0 .login .other .register { float: right; }

	.main__b__0 .login .prefixIcon {
		color: rgba(0, 0, 0, 0.25);
		font-size: 14px;
	}

	.main__b__0 .login .submit {
		margin-top: 32px;
		width: 100%;
	}

	.main__b__0 .input {
		border-radius: 5px;
	}
</style>

@code {

	[Inject]
	private NavigationManager Navigator { get; set; }

	[Inject]
	private ApiClient Api { get; set; }

	[Inject]
	private MessageService MessageService { get; set; }

	[Inject]
	private ISyncLocalStorageService LocalStorage { get; set; }

	private LoginParameters Parameters { get; } = new();

	private bool AutoLogin { get; set; }

	private bool LoggingIn { get; set; }

	protected async override Task OnParametersSetAsync() {
		await base.OnParametersSetAsync();
		bool hasId = LocalStorage.ContainKey("id"), hasPassword = LocalStorage.ContainKey("password");
		if (hasId) {
			var id = LocalStorage.GetItemAsString("id");
			if (int.TryParse(id, out var result))
				Parameters.Id = result;
		}
		if (hasPassword) {
			var password = LocalStorage.GetItemAsString("password");
			Parameters.Password = password;
		}
		if (hasId && hasPassword)
			AutoLogin = true;
		if (hasId || hasPassword)
			StateHasChanged();
	}

	private async void OnSubmit() {
		if (Parameters.Id is null) {
			var _ = MessageService.Error("学号不可为空");
			return;
		}
		if (Parameters.Password is null) {
			var _ = MessageService.Error("密码不可为空");
			return;
		}
		var id = Parameters.Id.Value;
		LoggingIn = true;
		try {
			await Api.LoginAsync(id, Parameters.Password);
			if (AutoLogin) {
				LocalStorage.SetItemAsString("id", id.ToString());
				LocalStorage.SetItemAsString("password", Parameters.Password!);
			}
			else {
				LocalStorage.RemoveItem("id");
				LocalStorage.RemoveItem("password");
			}
			Navigator.NavigateTo("/");
		}
		catch (ApiException ex) {
			if (ex.StatusCode == 401) {
				var _ = MessageService.Error("用户名或密码错误，请重新输入");
				Parameters.Password = null;
			}
			else {
				Console.WriteLine(JsonConvert.SerializeObject(ex, Formatting.Indented));
				var _ = MessageService.Error(ex.Message);
			}
		}
		finally {
			LoggingIn = false;
			StateHasChanged();
		}
	}
}
