@namespace Client.Pages.SubmissionResult
@page "/submission/{Id:int}/result"
@using Newtonsoft.Json

<PageContainer Title="评测结果">
	<Extra>
		<div style="display: flex">
			@if (Results is not null) {
				<SimpleSelect @bind-Value="@DisplayingCompiler">
					<SelectOptions>
						@foreach (string key in Results.Keys) {
							<SimpleSelectOption Label="@key" Value="@key" />
						}
					</SelectOptions>
				</SimpleSelect>
			}
			<Button Disabled="@(Problem is null)" OnClick="@OnReturnToProblemClick" Type="@ButtonType.Primary">返回题目</Button>
		</div>
	</Extra>
	<ExtraContent>
		<div style="display: flex">
			<Statistic Title="@("总得分")" Value="@("/")">
				<PrefixTemplate>
					@if (Results is null) {
						<Spin />
					}
					else {
						<AntDesign.Text>@Results.Values.Average(r => r.Score).ToString("F1")</AntDesign.Text>
					}
				</PrefixTemplate>
				<SuffixTemplate>
					@if (SubmissionLimit is null) {
						<Spin />
					}
					else {
						<AntDesign.Text>@SubmissionLimit.GetTotalScore().ToString("F1")</AntDesign.Text>
					}
				</SuffixTemplate>
			</Statistic>
			@if (DisplayingCompilerResult is not null && SubmissionLimit is not null) {
				<Statistic Suffix="@($"/ {SubmissionLimit.GetTotalScore():F1}")" Title="@("当前编译器得分")" Value="@DisplayingCompilerResult.Score" Style="margin-left: 12px" />
			}
		</div>
	</ExtraContent>
	<Content>
		@if (Submission is not null && Problem is not null) {
			<Descriptions Bordered Column="3" Size="@AntSizeLDSType.Small" Class="headerList">
				<DescriptionsItem Title="@("评测序号")">@Id</DescriptionsItem>
				<DescriptionsItem Title="@("提交时间")">@Submission.Timestamp.ToString("yyyy-MM-dd hh:mm:ss")</DescriptionsItem>
				<DescriptionsItem Title="@("提交模式")">@(Submission.Test ? "测试提交" : "正式提交")</DescriptionsItem>
				<DescriptionsItem Title="@("题目")" Span="2">@Problem.Title</DescriptionsItem>
				<DescriptionsItem Title="@("用户")">@Submission.UserId</DescriptionsItem>
			</Descriptions>
		}
	</Content>
	<ChildContent>
		<div class="main__b__3">
			<GridContent>
				<Card Style="margin-bottom: 24px;" Title="@("评测进度")">
					<Steps Current="@CurrentStep" Direction="horizontal">
						<ChildContent>
							<Step Title="@("已提交")" />
							<Step Title="@("正在排队")" />
							<Step Title="@("正在评测")" />
							<Step Title="@("评测结束")" />
						</ChildContent>
					</Steps>
				</Card>
				@if (DisplayingCompilerResult is not null) {
					@if (DisplayingCompilerResult.Message is not null) {
						<Alert Type="@AlertType.Error" Message="编译信息" Description="@DisplayingCompilerResult.Message" />
					}
					else {
						<Card BodyStyle="display: flex; flex-wrap: wrap; align-content: space-between" Style="margin-bottom: 24px" Title="@("测试点状态")">
							@foreach (var result in DisplayingCompilerResult.TestCases!) {
								<TestCaseResultCard Result="@result" />
							}
						</Card>
					}
				}
			</GridContent>
		</div>
	</ChildContent>
</PageContainer>

@code {

	private string? _displayingCompiler;

	[Parameter]
	public int Id { get; set; }

	[Inject]
	private NavigationManager Navigator { get; set; }

	[Inject]
	private ApiClient Api { get; set; }

	private Submission? Submission { get; set; }

	private Problem? Problem { get; set; }

	private ProblemSubmissionLimit? SubmissionLimit { get; set; }

	private SubmissionStatus Status { get; set; } = SubmissionStatus.Submitted;

	private IDictionary<string, CompilerResult>? Results { get; set; }

	private string? DisplayingCompiler {
		get => _displayingCompiler;
		set {
			if (_displayingCompiler != value) {
				_displayingCompiler = value;
				StateHasChanged();
			}
		}
	}

	private int CurrentStep => Status switch {
		SubmissionStatus.Submitted => 0,
		SubmissionStatus.Queueing => 1,
		SubmissionStatus.Judging => 2,
		_ => 3
	};

	private CompilerResult? DisplayingCompilerResult => DisplayingCompiler is null ? null : Results?[DisplayingCompiler];

	protected override async Task OnParametersSetAsync() {
		await base.OnParametersSetAsync();
		Submission = (await Api.GetSubmissionAsync(Id, false)).Result;
		Problem = (await Api.GetProblemAsync(Submission.ProblemId)).Result;
		SubmissionLimit = (await Api.GetProblemSubmissionLimitAsync(Submission.ProblemId)).Result;
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var interval = TimeSpan.FromSeconds(1);
#pragma warning disable CS4014
		Task.Run(async () => {
			while (true) {
				try {
					var time = DateTime.Now;
					Status = (await Api.GetSubmissionStatusAsync(Id)).Result.SubmissionStatus;
					if (Status is SubmissionStatus.Judged or SubmissionStatus.Reviewed)
						break;
					var duration = DateTime.Now - time;
					if (duration < interval)
						await Task.Delay(interval - duration);
					StateHasChanged();
				}
				catch (Exception ex) {
					Console.WriteLine(JsonConvert.SerializeObject(ex, Formatting.Indented));
				}
			}
			Results = (await Api.GetJudgementResultAsync(Id)).Result;
			DisplayingCompiler = Results.Keys.First();
		}).ConfigureAwait(false);
#pragma warning restore CS4014
	}

	private void OnReturnToProblemClick() => Navigator.NavigateTo($"/problem/{Problem!.Id}");

}