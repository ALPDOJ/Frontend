@namespace Client.Pages.SubmissionResult
@page "/submission/{Id:int}/result"

<PageContainer Title="评测结果">
	<Extra>
		<div style="display: flex">
			@if (Results is not null) {
				<SimpleSelect @bind-Value="@DisplayingCompiler">
					<SelectOptions>
						@foreach (string key in Results.Keys) {
							<SimpleSelectOption Label="@key" Value="@key" />
						}
					</SelectOptions>
				</SimpleSelect>
			}
			<Button Disabled="@(Problem is null)" OnClick="@OnReturnToProblemClick" Type="@ButtonType.Primary">返回题目</Button>
		</div>
	</Extra>
	<ExtraContent>
		<div style="display: flex">
			<Statistic Title="@("总得分")" Value="@("/")">
				<PrefixTemplate>
					@if (Status == SubmissionStatus.Aborted) {
						<Icon Type="@IconType.Outline.CloseCircle" Style="color:crimson" />
					}
					else {
						<TextOrSpin Value="@Results?.Values.Average(r => r.Score).ToString("F1")" />
					}
				</PrefixTemplate>
				<SuffixTemplate>
					<TextOrSpin Value="@SubmissionLimit?.TotalScore.ToString("F1")" />
				</SuffixTemplate>
			</Statistic>
			@if (DisplayingCompilerResult is not null && SubmissionLimit is not null) {
				<Statistic Suffix="@($"/ {SubmissionLimit.TotalScore:F1}")" Title="@("当前编译器得分")" Value="@DisplayingCompilerResult.Score" Style="margin-left: 12px" />
			}
		</div>
	</ExtraContent>
	<Content>
		@if (Submission is not null && Problem is not null) {
			<Descriptions Bordered Column="3" Size="@AntSizeLDSType.Small" Class="header-list">
				<DescriptionsItem Title="@("评测序号")">@Id</DescriptionsItem>
				<DescriptionsItem Title="@("提交时间")">@Submission.CreatedTime.ToString("yyyy-MM-dd hh:mm:ss")</DescriptionsItem>
				<DescriptionsItem Title="@("提交模式")">@(Submission.Test ? "测试提交" : "正式提交")</DescriptionsItem>
				<DescriptionsItem Title="@("题目")" Span="2">@Problem.Title</DescriptionsItem>
				<DescriptionsItem Title="@("用户")">@Submission.UserId</DescriptionsItem>
			</Descriptions>
		}
	</Content>
	<ChildContent>
		<div class="main__b__3">
			<GridContent>
				<Card Style="margin-bottom: 24px;" Title="@("评测进度")">
					<Steps Current="@CurrentStep" Direction="horizontal" Status="@StepsStatus">
						<Step Title="已提交" />
						<Step Title="正在排队" />
						<Step Title="正在编译" />
						<Step Title="正在运行" />
						@if (Status == SubmissionStatus.Aborted) {
							<Step Title="评测异常" />
						}
						else {
							<Step Title="评测结束" />
						}
					</Steps>
				</Card>
				@if (DisplayingCompilerResult is not null) {
					@if (DisplayingCompilerResult.Message?.Errors?.Count > 0) {
						<Alert Type="@AlertType.Error" Message="编译错误" Style="margin-bottom: 1em">
							<AntList Bordered DataSource="@DisplayingCompilerResult.Message.Errors" Size="@AntSizeLDSType.Small">
								<ListItem>
									@context
								</ListItem>
							</AntList>
						</Alert>
					}
					@if (DisplayingCompilerResult.Message?.Warnings?.Count > 0) {
						<Alert Type="@AlertType.Warning" Message="编译警告" Style="margin-bottom: 1em">
							<AntList Bordered DataSource="@DisplayingCompilerResult.Message.Warnings" Size="@AntSizeLDSType.Small">
								<ListItem>
									@context
								</ListItem>
							</AntList>
						</Alert>
					}
					@if (DisplayingCompilerResult.Testcases is not null && VisibleTestcases is not null) {
						<Card Title="测试点状态" BodyStyle="display: flex; flex-wrap: wrap; align-content: space-between" Style="margin-bottom: 24px">
							<Space Size="@(("16","16"))" Wrap>
								@foreach (var result in DisplayingCompilerResult.Testcases!) {
									VisibleTestcases.TryGetValue(result.Id, out var testcase);
									<SpaceItem>
										<TestCaseResultCard Result="@result" Testcase="@testcase" />
									</SpaceItem>
								}
							</Space>
						</Card>
					}
				}
			</GridContent>
		</div>
	</ChildContent>
</PageContainer>

@code {

	private string? _displayingCompiler;

	[Parameter]
	public int Id { get; set; }

	[Inject]
	private ModalService ModalService { get; init; }

	[Inject]
	private NavigationManager Navigator { get; init; }

	[Inject]
	private ApiClient Api { get; init; }

	[Inject]
	private ErrorHandler ErrorHandler { get; init; }

	private Submission? Submission { get; set; }

	private Problem? Problem { get; set; }

	private ProblemSubmissionLimit? SubmissionLimit { get; set; }

	private Dictionary<int, Testcase>? VisibleTestcases { get; set; }

	private SubmissionStatus Status { get; set; } = SubmissionStatus.Submitted;

	private IDictionary<string, CompilerResult>? Results { get; set; }

	private string? DisplayingCompiler {
		get => _displayingCompiler;
		set {
			if (_displayingCompiler != value) {
				_displayingCompiler = value;
				StateHasChanged();
			}
		}
	}

	private int CurrentStep => Status switch {
		SubmissionStatus.Submitted => 0,
		SubmissionStatus.Queueing => 1,
		SubmissionStatus.Compiling => 2,
		SubmissionStatus.Running => 3,
		_ => 4
	};

	private string StepsStatus => Status switch {
		SubmissionStatus.Submitted or SubmissionStatus.Queueing => "wait",
		SubmissionStatus.Compiling or SubmissionStatus.Running => "process",
		SubmissionStatus.Aborted => "error",
		_ => "finish"
	};

	private CompilerResult? DisplayingCompilerResult => DisplayingCompiler is null ? null : Results?[DisplayingCompiler];

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var interval = TimeSpan.FromSeconds(1);
		try {
			Submission = (await Api.GetSubmissionAsync(Id, false)).Result;
			Problem = (await Api.GetProblemAsync(Submission.ProblemId)).Result;
			SubmissionLimit = (await Api.GetProblemSubmissionLimitAsync(Submission.ProblemId)).Result;
			VisibleTestcases = (await Api.GetExampleTestcasesAsync(Submission.ProblemId)).Result.ToDictionary(t => t.Id);
		}
		catch (ApiException ex) {
			StateHasChanged();
			if (!ErrorHandler.Handle(ex))
				throw;
		}
		StateHasChanged();
		if (Problem?.Manual == true) {
			ModalService.Success(new ConfirmOptions {
				Title = "提交成功！"
			});


			return;
		}
		var _ = Task.Run(async () => {
			while (true) {
				try {
					var time = DateTime.Now;
					var prevStatus = Status;
					Status = (await Api.GetSubmissionStatusAsync(Id)).Result.Status;
					if (Status is SubmissionStatus.Judged or SubmissionStatus.Reviewed or SubmissionStatus.Aborted)
						break;
					var duration = DateTime.Now - time;
					if (duration < interval)
						await Task.Delay(interval - duration);
					if (Status != prevStatus)
						StateHasChanged();
				}
				catch (Exception ex) {
					ErrorHandler.Handle(ex);
					break;
				}
			}
			if (Status != SubmissionStatus.Aborted) {
				try {
					Results = (await Api.GetJudgementResultAsync(Id)).Result;
					DisplayingCompiler = Results.Keys.First();
				}
				catch (Exception ex) {
					ErrorHandler.Handle(ex);
				}
			}
			StateHasChanged();
		});
	}

	private void OnReturnToProblemClick() => Navigator.NavigateTo($"/problem/{Problem!.Id}");

}